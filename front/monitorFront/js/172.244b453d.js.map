{"version":3,"file":"js/172.244b453d.js","mappings":"oKAEA,MAAMA,EAAa,CACjBC,MAAO,YACPC,IAAK,aAGD,SAAUC,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,OAAQC,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,MAAOX,EAAY,KAAM,IACrE,C,oECPO,MAAMY,EAiCXC,WAAAA,CAAYC,IAAQC,EAAAA,EAAAA,GAAA,WAhCd,OAAIA,EAAAA,EAAAA,GAAA,iBACE,IAAIC,MAAKD,EAAAA,EAAAA,GAAA,mBACP,IAAIC,MAAKD,EAAAA,EAAAA,GAAA,mBACT,IAAIC,MAAKD,EAAAA,EAAAA,GAAA,wBACJ,IAAIC,MAAKD,EAAAA,EAAAA,GAAA,sBAEX,OAAIA,EAAAA,EAAAA,GAAA,0BACA,OAAIA,EAAAA,EAAAA,GAAA,sBAER,OAAIA,EAAAA,EAAAA,GAAA,uBACH,OAAIA,EAAAA,EAAAA,GAAA,kBACT,OAAIA,EAAAA,EAAAA,GAAA,mBACH,OAAIA,EAAAA,EAAAA,GAAA,aACV,OAAIA,EAAAA,EAAAA,GAAA,cACH,OAAIA,EAAAA,EAAAA,GAAA,yBACO,OAAIA,EAAAA,EAAAA,GAAA,2BACF,OAAIA,EAAAA,EAAAA,GAAA,YACnB,OAAIA,EAAAA,EAAAA,GAAA,aACH,OAAIA,EAAAA,EAAAA,GAAA,aACJ,OAAIA,EAAAA,EAAAA,GAAA,aACJ,OAAIA,EAAAA,EAAAA,GAAA,qBACI,OAAIA,EAAAA,EAAAA,GAAA,qBACJ,IAAIE,aAAa,MAAGF,EAAAA,EAAAA,GAAA,2BACd,KAAEA,EAAAA,EAAAA,GAAA,oBAET,IAAGA,EAAAA,EAAAA,GAAA,aAEV,IAACA,EAAAA,EAAAA,GAAA,aACF,IAAIA,EAAAA,EAAAA,GAAA,gBACA,IAACA,EAAAA,EAAAA,GAAA,iBACA,GAGVG,KAAKJ,OAASA,EACdI,KAAKC,gBAAkBL,EAAOM,YAAYC,cAC1CH,KAAKI,iBAAiBC,IACpBC,EAASC,cACR,qpIA0IHP,KAAKI,iBAAiBC,IACpBC,EAASE,gBACR,uFAQHR,KAAKI,iBAAiBC,IACpBC,EAASG,kBACR,0nHAqHHT,KAAKI,iBAAiBC,IACpBC,EAASI,oBACR,64FA+GL,CACA,uBAAMC,GACJ,MAAMC,EAAa,GACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAWE,KAAKd,KAAKe,SAAST,EAASU,iBAAmBH,EAAGb,KAAKJ,OAAOqB,WAAWJ,GAAI,UACxFD,EAAWE,KAAKd,KAAKe,SAAST,EAASY,cAAgBL,EAAGb,KAAKJ,OAAOuB,QAAQN,GAAI,UAEpFD,EAAWE,KAAKd,KAAKe,SAAST,EAASc,wBAAyBpB,KAAKJ,OAAOyB,WAAWC,iBAAkB,gBACnGC,QAAQC,IAAIZ,EACpB,CAEAG,QAAAA,CAASU,EAAKC,EAASC,GACrB,OAAO,IAAIJ,SAAQ,CAACK,EAASC,KAC3BC,EAAAA,EAAMC,IAAIL,EAAS,CAAEM,aAAc,SAAUC,MAAMC,IACjDC,kBAAkBD,EAAIE,KAAM,CAAEC,iBAAkBV,EAAMW,iBAAkB,OAAQC,qBAAsB,YAAaN,MAAMO,IACvHxC,KAAKyC,UAAUpC,IAAIoB,EAAKe,GACxBZ,EAAQ,KAAK,GACb,GACF,GAEN,CAEAc,eAAAA,CAAgBC,GACd3C,KAAK4C,IAAMD,EAEX3C,KAAK6C,eAAiB,IAAIC,EAAUH,GACpC3C,KAAK+C,mBAAqB,IAAID,EAAUH,GAExC3C,KAAK6C,eAAeG,UAAUL,EAAI3C,KAAKI,iBAAiB2B,IAAIzB,EAASC,eAAgBP,KAAKI,iBAAiB2B,IAAIzB,EAASE,iBAAkB,CAAC,UAAW,cACtJR,KAAK+C,mBAAmBC,UAAUL,EAAI3C,KAAKI,iBAAiB2B,IAAIzB,EAASG,mBAAoBT,KAAKI,iBAAiB2B,IAAIzB,EAASI,sBAEhI,MAAMuC,EAAeC,KAAKC,KAAKD,KAAKE,KAAKpD,KAAKJ,OAAOM,YAAYmD,mBAEjErD,KAAKsD,cAAc,GAAKtD,KAAKJ,OAAO2D,aAAaC,KACjDxD,KAAKsD,cAAc,GAAKtD,KAAKJ,OAAO2D,aAAaE,KACjDzD,KAAKsD,cAAc,IAAMtD,KAAKJ,OAAO2D,aAAaG,KAClD1D,KAAKsD,cAAc,IAAMtD,KAAKJ,OAAO2D,aAAaI,KAGlD3D,KAAK4D,YAAYvD,IAAIC,EAASuD,UAAWC,EAAWnB,EAAIA,EAAGoB,OAAQpB,EAAGoB,OAAQpB,EAAGqB,cAAerB,EAAGqB,gBACnGhE,KAAK4D,YAAYvD,IAAIC,EAAS2D,UAAWH,EAAWnB,EAAIA,EAAGuB,QAASvB,EAAGuB,QAASvB,EAAGqB,cAAerB,EAAGqB,gBAGrGhE,KAAKmE,eAAiBxB,EAAGyB,oBACzBzB,EAAG0B,gBAAgBrE,KAAKmE,gBACxB,MAAMG,EAAoB,IAAIvE,aAAakD,EAAeA,EAAe,GAAGsB,KAAK,GACjF,IAAK,IAAI1D,EAAI,EAAGA,EAAIoC,EAAeA,EAAcpC,IAC/CyD,EAAsB,EAAJzD,EAAQ,GAAK2D,EAAK,EAAG,GACvCF,EAAsB,EAAJzD,EAAQ,GAAK2D,EAAK,EAAG,GACvCF,EAAsB,EAAJzD,EAAQ,GAAK,EAEjCb,KAAKyE,kBAAoBC,EAAmB/B,EAAIA,EAAGgC,aAAcL,EAAmB3B,EAAGiC,cACvFjC,EAAGkC,WAAWlC,EAAGgC,aAAc3E,KAAKyE,mBACpC9B,EAAGmC,oBAAoB,EAAG,EAAGnC,EAAGoC,OAAO,EAAO,GAAO,GACrDpC,EAAGqC,wBAAwB,GAC3B,MAAMC,EAAyB,IAAIlF,aAAaC,KAAKJ,OAAOM,YAAYmD,kBAAkBkB,KAA6C,EAAxCvE,KAAKJ,OAAOM,YAAYC,eACjH+E,EAAaR,EAAmB/B,EAAIA,EAAGgC,aAAcM,EAAwBtC,EAAGiC,cACtFjC,EAAGkC,WAAWlC,EAAGgC,aAAcO,GAC/BvC,EAAGmC,oBAAoB,EAAG,EAAGnC,EAAGoC,OAAO,EAAO,EAAO,GACrDpC,EAAGqC,wBAAwB,GAC3BrC,EAAGkC,WAAWlC,EAAGgC,aAAc,MAC/BhC,EAAG0B,gBAAgB,MAGnBrE,KAAKmF,gBAAkBxC,EAAGyB,oBAC1BzB,EAAG0B,gBAAgBrE,KAAKmF,iBACxBnF,KAAKoF,oBAAsBV,EAAmB/B,EAAIA,EAAGgC,aAAcL,EAAmB3B,EAAGiC,cACzFjC,EAAGkC,WAAWlC,EAAGgC,aAAc3E,KAAKoF,qBACpCzC,EAAGmC,oBAAoB,EAAG,EAAGnC,EAAGoC,OAAO,EAAO,GAAO,GACrDpC,EAAGqC,wBAAwB,GAC3B,MAAMK,EAAeX,EAAmB/B,EAAIA,EAAGgC,aAAcM,EAAwBtC,EAAGiC,cACxFjC,EAAGkC,WAAWlC,EAAGgC,aAAcU,GAC/B1C,EAAGmC,oBAAoB,EAAG,EAAGnC,EAAGoC,OAAO,EAAO,EAAO,GACrDpC,EAAGqC,wBAAwB,GAC3BrC,EAAGkC,WAAWlC,EAAGgC,aAAc,MAC/BhC,EAAG0B,gBAAgB,MAGnBrE,KAAKsF,WAAa3C,EAAGyB,oBACrBzB,EAAG0B,gBAAgBrE,KAAKsF,YACxB3C,EAAGkC,WAAWlC,EAAGgC,aAAcO,GAC/BvC,EAAGmC,oBAAoB,EAAG,EAAGnC,EAAGoC,OAAO,EAAO,EAAO,GACrDpC,EAAG4C,oBAAoB,EAAG,GAC1B5C,EAAGqC,wBAAwB,GAC3BrC,EAAGkC,WAAWlC,EAAGgC,aAAc,MAC/BhC,EAAG0B,gBAAgB,MAGnBrE,KAAKwF,YAAc7C,EAAGyB,oBACtBzB,EAAG0B,gBAAgBrE,KAAKwF,aACxB7C,EAAGkC,WAAWlC,EAAGgC,aAAcU,GAC/B1C,EAAGmC,oBAAoB,EAAG,EAAGnC,EAAGoC,OAAO,EAAO,EAAO,GACrDpC,EAAG4C,oBAAoB,EAAG,GAC1B5C,EAAGqC,wBAAwB,GAC3BrC,EAAGkC,WAAWlC,EAAGgC,aAAc,MAC/BhC,EAAG0B,gBAAgB,MAGnBrE,KAAKyF,MAAQ9C,EAAG+C,0BAChB/C,EAAGgD,sBAAsBhD,EAAGiD,mBAAoB5F,KAAKyF,OACrD9C,EAAGkC,WAAWlC,EAAGkD,0BAA2B7F,KAAKoF,qBACjDzC,EAAGmD,gBAAgBnD,EAAGkD,0BAA2B,EAAG7F,KAAKoF,oBAAqB,EAAGnC,EAAeA,EAAe,IAC/GN,EAAGkC,WAAWlC,EAAGkD,0BAA2BR,GAC5C1C,EAAGmD,gBAAgBnD,EAAGkD,0BAA2B,EAAGR,EAAc,EAAGpC,EAAeA,EAAe,GACnGN,EAAGkC,WAAWlC,EAAGkD,0BAA2B,MAC5ClD,EAAGgD,sBAAsBhD,EAAGiD,mBAAoB,MAGhD5F,KAAK+F,OAASpD,EAAG+C,0BACjB/C,EAAGgD,sBAAsBhD,EAAGiD,mBAAoB5F,KAAK+F,QACrDpD,EAAGkC,WAAWlC,EAAGkD,0BAA2B7F,KAAKyE,mBACjD9B,EAAGmD,gBAAgBnD,EAAGkD,0BAA2B,EAAG7F,KAAKyE,kBAAmB,EAAGxB,EAAeA,EAAe,IAC7GN,EAAGkC,WAAWlC,EAAGkD,0BAA2BX,GAC5CvC,EAAGmD,gBAAgBnD,EAAGkD,0BAA2B,EAAGX,EAAY,EAAGjC,EAAeA,EAAe,GACjGN,EAAGkC,WAAWlC,EAAGkD,0BAA2B,MAC5ClD,EAAGgD,sBAAsBhD,EAAGiD,mBAAoB,MAEhD5F,KAAKgG,KAAOrD,EAAGsD,eACftD,EAAGkC,WAAWlC,EAAGgC,aAAc3E,KAAKgG,MACpCrD,EAAGuD,WAAWvD,EAAGgC,aAAc,GAAIhC,EAAGiC,cACtCjC,EAAGkC,WAAWlC,EAAGgC,aAAc,MAG/B,IAAK,IAAI9D,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMsF,EAAmBC,EAAgBzD,EAAI,EAAGA,EAAG0D,WAAYC,uBAAuBC,MAAO,EAAG,GAChGC,EACE7D,EACA3C,KAAKyC,UAAUV,IAAIzB,EAASU,iBAAmBH,GAC/C,cACA,EACAb,KAAKJ,OAAO6G,YAAYC,UAAU,GAClC1G,KAAKJ,OAAO6G,YAAYC,UAAU,GAClC/D,EAAG0D,WACHF,EACAG,uBAAuBC,MACvB,EACAD,uBAAuBK,GACvBL,uBAAuBvB,OAEzB/E,KAAK4G,YAAYvG,IAAIC,EAASuG,mBAAqBhG,EAAGsF,GAEtD,MAAMW,EAAiBV,EAAgBzD,EAAI,EAAGA,EAAG0D,WAAYC,uBAAuBS,MAAO,EAAG,GAC9FP,EACE7D,EACA3C,KAAKyC,UAAUV,IAAIzB,EAASY,cAAgBL,GAC5C,UACA,EACAb,KAAKJ,OAAO6G,YAAYtF,QAAQ,GAChCnB,KAAKJ,OAAO6G,YAAYtF,QAAQ,GAChCwB,EAAG0D,WACHS,EACAR,uBAAuBS,MACvB,EACAT,uBAAuBU,KACvBV,uBAAuBW,eAEzBjH,KAAK4G,YAAYvG,IAAIC,EAAS4G,gBAAkBrG,EAAGiG,EACrD,CACA,MAAMK,EAAoBf,EAAgBzD,EAAI,EAAGA,EAAG0D,WAAYC,uBAAuBC,MAAO,EAAG,GACjGC,EACE7D,EACA3C,KAAKyC,UAAUV,IAAIzB,EAASc,yBAC5B,cACA,EACApB,KAAKJ,OAAO6G,YAAYpF,WAAW,GACnCrB,KAAKJ,OAAO6G,YAAYpF,WAAW,GACnCsB,EAAG0D,WACHc,EACAb,uBAAuBC,MACvB,EACAD,uBAAuBK,GACvBL,uBAAuBvB,OAEzB/E,KAAK4G,YAAYvG,IAAIC,EAAS8G,0BAA2BD,GAEzD,MAAME,EAAiBnE,KAAKoE,MAAMtH,KAAKJ,OAAOM,YAAYqH,eAAiBtE,GAC3E,IAAK,IAAIpC,EAAI,EAAGA,EAAIb,KAAKJ,OAAOM,YAAYC,cAAeU,IAAK,CAC9D,MAAM2G,EAAS,CACbC,QAAU5G,EAAIwG,EAAkBpE,EAChCyE,QAASxE,KAAKoE,MAAMzG,EAAIwG,GAAkBpE,GAE5CjD,KAAK2H,oBAAoB7G,KAAK0G,EAChC,CACAlD,EAAkBC,KAAK,GACvB,MAAMqD,EAAcxB,EAAgBzD,EAAI,EAAGA,EAAG0D,WAAYC,uBAAuBuB,OAAQ7H,KAAKJ,OAAOM,YAAYqH,eAAgBvH,KAAKJ,OAAOM,YAAYqH,gBACzJvH,KAAK4G,YAAYvG,IAAIC,EAASwH,aAAcF,EAC9C,CAEAG,cAAAA,CAAepF,GACb3C,KAAKgI,aAAehI,KAAKgI,YAAc,GAAK,GAC5ChI,KAAKiI,OACL,MAAMC,EAAYlI,KAAKJ,OAAOsI,UAAYlI,KAAKJ,OAAOsI,UAAY,IASlE,GARAlI,KAAKsD,cAAc,GAAKtD,KAAKmI,MAAQD,EACrClI,KAAKsD,cAAc,GAAKtD,KAAKJ,OAAOM,YAAYC,cAChDH,KAAKsD,cAAc,GAA6C,GAAxCtD,KAAKJ,OAAOM,YAAYC,cAChDH,KAAKsD,cAAc,GAAK,KACxBtD,KAAKsD,cAAc,GAAK,KACxBtD,KAAKsD,cAAc,GAAK,EACxBtD,KAAKsD,cAAc,GAAK,EAEpBtD,KAAKmI,QAAUD,GAAalI,KAAKoI,KAAM,CACzCpI,KAAKoI,MAAO,EACZpI,KAAKqI,SAAWrI,KAAKsI,UACrBtI,KAAKsI,WAAatI,KAAKsI,UAAY,GAAKtI,KAAKJ,OAAOqB,WAAWsH,OAC/D,MAAMC,EAAOxI,KACPY,EAAa,GACnBZ,KAAKyC,UAAUpC,IAAIC,EAASU,iBAAmB,IAAKhB,KAAKyC,UAAUV,IAAIzB,EAASU,iBAAmB,MACnGhB,KAAKyC,UAAUpC,IAAIC,EAASY,cAAgB,IAAKlB,KAAKyC,UAAUV,IAAIzB,EAASY,cAAgB,MAC7FN,EAAWE,KAAKd,KAAKe,SAAST,EAASU,iBAAmB,IAAKhB,KAAKJ,OAAOqB,WAAWjB,KAAKsI,WAAY,UACvG1H,EAAWE,KAAKd,KAAKe,SAAST,EAASY,cAAgB,IAAKlB,KAAKJ,OAAOuB,QAAQnB,KAAKsI,WAAY,UACjG/G,QAAQC,IAAIZ,GAAYqB,MAAMC,IAC5BsG,EAAKJ,MAAO,EACZI,EAAKL,MAAQ,EACbK,EAAK5B,YAAYvG,IAAIC,EAASuG,mBAAqB,IAAK2B,EAAK5B,YAAY7E,IAAIzB,EAASuG,mBAAqB,MAC3G2B,EAAK5B,YAAYvG,IAAIC,EAAS4G,gBAAkB,IAAKsB,EAAK5B,YAAY7E,IAAIzB,EAAS4G,gBAAkB,MACrG,MAAMf,EAAmBC,EAAgBzD,EAAI,EAAGA,EAAG0D,WAAYC,uBAAuBC,MAAO,EAAG,GAChGC,EACE7D,EACA6F,EAAK/F,UAAUV,IAAIzB,EAASU,iBAAmB,KAC/C,cACA,EACAwH,EAAK5I,OAAO6G,YAAYC,UAAU,GAClC8B,EAAK5I,OAAO6G,YAAYC,UAAU,GAClC/D,EAAG0D,WACHF,EACAG,uBAAuBC,MACvB,EACAD,uBAAuBK,GACvBL,uBAAuBvB,OAEzByD,EAAK5B,YAAYvG,IAAIC,EAASuG,mBAAqB,IAAKV,GAExD,MAAMW,EAAiBV,EAAgBzD,EAAI,EAAGA,EAAG0D,WAAYC,uBAAuBS,MAAO,EAAG,GAC9FP,EACE7D,EACA6F,EAAK/F,UAAUV,IAAIzB,EAASY,cAAgB,KAC5C,UACA,EACAsH,EAAK5I,OAAO6G,YAAYtF,QAAQ,GAChCqH,EAAK5I,OAAO6G,YAAYtF,QAAQ,GAChCwB,EAAG0D,WACHS,EACAR,uBAAuBS,MACvB,EACAT,uBAAuBU,KACvBV,uBAAuBW,eAEzBuB,EAAK5B,YAAYvG,IAAIC,EAAS4G,gBAAkB,IAAKJ,EAAe,GAExE,CACF,CAEAmB,IAAAA,GACMjI,KAAKgI,YAAc,GAAK,GAC1BhI,KAAKyI,MAAQzI,KAAKmE,eAClBnE,KAAK0I,MAAQ1I,KAAKsF,WAClBtF,KAAK2I,MAAQ3I,KAAKyF,MAClBzF,KAAK4I,cAAgB5I,KAAKyE,oBAE1BzE,KAAKyI,MAAQzI,KAAKmF,gBAClBnF,KAAK0I,MAAQ1I,KAAKwF,YAClBxF,KAAK2I,MAAQ3I,KAAK+F,OAClB/F,KAAK4I,cAAgB5I,KAAKoF,oBAE9B,CAEAyD,OAAAA,CAAQlG,EAAImG,GACVnG,EAAGkC,WAAWlC,EAAGoG,eAAgB/I,KAAKgG,MACtCrD,EAAGqG,cAAcrG,EAAGoG,eAAgB,EAAG/I,KAAKsD,eAC5CX,EAAGmD,gBAAgBnD,EAAGoG,eAAgBD,EAAmB9I,KAAKgG,KAAM,EAA+B,EAA5BhG,KAAKsD,cAAciF,OAC5F,CAEAU,UAAAA,CAAWtG,EAAIuG,GACb,MAAMjG,EAAeC,KAAKC,KAAKD,KAAKE,KAAKpD,KAAKJ,OAAOM,YAAYmD,mBAEjErD,KAAK6I,QAAQlG,EAAI,GAEjBA,EAAG0B,gBAAgBrE,KAAKyI,OACxB9F,EAAGgD,sBAAsBhD,EAAGiD,mBAAoB5F,KAAK2I,OACrDhG,EAAGwG,cAAcxG,EAAGyG,UACpBzG,EAAG0G,YAAY1G,EAAG0D,WAAYrG,KAAK4G,YAAY7E,IAAIzB,EAASuG,mBAAqB,IACjFlE,EAAG2G,YAAY,EAAGtJ,KAAK4D,YAAY7B,IAAIzB,EAASuD,YAChDlB,EAAGwG,cAAcxG,EAAG4G,UACpB5G,EAAG0G,YAAY1G,EAAG0D,WAAYrG,KAAK4G,YAAY7E,IAAIzB,EAASuG,mBAAqB,IACjFlE,EAAG2G,YAAY,EAAGtJ,KAAK4D,YAAY7B,IAAIzB,EAASuD,YAChDlB,EAAGwG,cAAcxG,EAAG6G,UACpB7G,EAAG0G,YAAY1G,EAAG0D,WAAYrG,KAAK4G,YAAY7E,IAAIzB,EAAS4G,gBAAkB,IAC9EvE,EAAG2G,YAAY,EAAGtJ,KAAK4D,YAAY7B,IAAIzB,EAAS2D,YAChDtB,EAAGwG,cAAcxG,EAAG8G,UACpB9G,EAAG0G,YAAY1G,EAAG0D,WAAYrG,KAAK4G,YAAY7E,IAAIzB,EAAS4G,gBAAkB,IAC9EvE,EAAG2G,YAAY,EAAGtJ,KAAK4D,YAAY7B,IAAIzB,EAAS2D,YAEhDjE,KAAK6C,eAAe6G,WAAW/G,GAC/B3C,KAAK6C,eAAe8G,SAAShH,EAAI,YAAa,CAAC,EAAG,IAClD3C,KAAK6C,eAAe8G,SAAShH,EAAI,OAAQ,CAAC,EAAG,IAC7C3C,KAAK6C,eAAe+G,SAASjH,EAAI,aAAcO,KAAK2G,UACpD7J,KAAK6C,eAAeiH,gBAAgBnH,EAAI,oBAAqB,GAC7DA,EAAGoH,OAAOpH,EAAGqH,oBACbrH,EAAGsH,uBAAuBtH,EAAGuH,QAE7B,MAAMC,EAAanK,KAAKJ,OAAOuK,WAAanK,KAAKJ,OAAOuK,WAAa,IACrExH,EAAGyH,WAAWzH,EAAGuH,OAAQ,EAAGC,GAC5BxH,EAAG0H,uBACH1H,EAAG2H,QAAQ3H,EAAGqH,oBACdrH,EAAG0B,gBAAgB,MACnB1B,EAAGgD,sBAAsBhD,EAAGiD,mBAAoB,MAIhDjD,EAAGkC,WAAWlC,EAAG4H,oBAAqBvK,KAAK4I,eAC3C4B,EACE7H,EACA,EACAM,EACAA,EACAN,EAAG0D,WACHrG,KAAK4G,YAAY7E,IAAIzB,EAASwH,cAC9B9H,KAAK2H,oBAAoB3H,KAAKgI,aAAaP,QAC3CzH,KAAK2H,oBAAoB3H,KAAKgI,aAAaN,QAC3CpB,uBAAuBmE,IACvBnE,uBAAuBvB,OAEzBpC,EAAGkC,WAAWlC,EAAG4H,oBAAqB,MAClCvK,KAAKC,gBAAkB,EACzBD,KAAKC,mBAGHD,KAAKoI,MAAMpI,KAAKmI,QAIpBxF,EAAG0B,gBAAgBrE,KAAK0I,OACxB/F,EAAGwG,cAAcxG,EAAGyG,UACpBzG,EAAG0G,YAAY1G,EAAG0D,WAAYrG,KAAK4G,YAAY7E,IAAIzB,EAASwH,eAC5DnF,EAAG2G,YAAY,EAAGtJ,KAAK4D,YAAY7B,IAAIzB,EAAS2D,YAChDtB,EAAGwG,cAAcxG,EAAG4G,UACpB5G,EAAG0G,YAAY1G,EAAG0D,WAAYrG,KAAK4G,YAAY7E,IAAIzB,EAAS8G,4BAC5DzE,EAAG2G,YAAY,EAAGtJ,KAAK4D,YAAY7B,IAAIzB,EAASuD,YAChDlB,EAAG2H,QAAQ3H,EAAG+H,YACd/H,EAAGoH,OAAOpH,EAAGgI,OACbhI,EAAGiI,WAAW,EAAK,EAAK,EAAK,GAC7BjI,EAAGkI,cAAclI,EAAGmI,UACpBnI,EAAGoI,kBAAkBpI,EAAGqI,IAAKrI,EAAGsI,oBAAqBtI,EAAGqI,IAAKrI,EAAGsI,qBAChEjL,KAAK+C,mBAAmB2G,WAAW/G,GACnC3C,KAAK+C,mBAAmBmI,OAAOvI,EAAI,eAAgB,GACnD3C,KAAK+C,mBAAmBmI,OAAOvI,EAAI,oBAAqB,GACxD3C,KAAK+C,mBAAmBmI,OAAOvI,EAAI,WAAY3C,KAAKJ,OAAOM,YAAYC,eACvEH,KAAK+C,mBAAmBmI,OAAOvI,EAAI,aAAc3C,KAAKgI,aACtDhI,KAAK+C,mBAAmBmI,OAAOvI,EAAI,YAAaM,GAChDjD,KAAK+C,mBAAmB6G,SAASjH,EAAI,oBAAqB,GAC1D3C,KAAK+C,mBAAmB6G,SAASjH,EAAI,YAAa,GAClD3C,KAAK+C,mBAAmB6G,SAASjH,EAAI,UAAW,GAChD3C,KAAK+C,mBAAmBoI,UAAUxI,EAAI,WAAYA,EAAGyI,OAAOC,MAAO1I,EAAGyI,OAAOE,QAC7EtL,KAAK+C,mBAAmBwI,QAAQ5I,EAAI,WAAYuG,GAChDlJ,KAAK+C,mBAAmB+G,gBAAgBnH,EAAI,oBAAqB,GACjEA,EAAG6I,oBAAoB7I,EAAG8I,eAAgB,EAAG,GAActB,GAE3DxH,EAAG2H,QAAQ3H,EAAGgI,OAEdhI,EAAG0B,gBAAgB,MACnB1B,EAAG0G,YAAY1G,EAAG0D,WAAY,MAChC,CAEA,yBAAMqF,CAAoBC,GACxB,MAAMnD,EAAOxI,KACb,IAAI4L,QACE5L,KAAKW,oBACX,MAAMkL,EAAS,CACbF,GAAIA,EACJG,KAAM,SACNC,KAAAA,CAAMC,EAAKrJ,GACT,MAAMsJ,EAAuBtJ,EAAGuJ,yBAChC,IAAK,MAAMC,KAAaF,EACtBtJ,EAAGyJ,aAAaD,GAElBP,EAASI,EACTxD,EAAK9F,gBAAgB2J,KAAK7D,EAAM7F,EAClC,EACA1D,MAAAA,CAAO0D,EAAIuG,GACTV,EAAKT,eAAepF,GACpB6F,EAAKS,WAAWtG,EAAIuG,GACpB0C,EAAOU,gBACT,GAEF,OAAOT,CACT,CAEAU,WAAAA,CAAYC,GACV,IAAKxM,KAAK4C,KAAO4J,GAASxM,KAAKJ,OAAOqB,WAAWsH,OAAQ,OACzD,MAAM5F,EAAK3C,KAAK4C,IAChB5C,KAAKoI,MAAO,EACZpI,KAAKqI,SAAWmE,EAChBxM,KAAKsI,WAAakE,EAAQ,GAAKxM,KAAKJ,OAAOqB,WAAWsH,OACtD,MAAM3H,EAAa,GACnBA,EAAWE,KAAKd,KAAKe,SAAST,EAASU,iBAAmB,IAAKhB,KAAKJ,OAAOqB,WAAWjB,KAAKqI,UAAW,UACtGzH,EAAWE,KAAKd,KAAKe,SAAST,EAASY,cAAgB,IAAKlB,KAAKJ,OAAOuB,QAAQnB,KAAKqI,UAAW,UAChGzH,EAAWE,KAAKd,KAAKe,SAAST,EAASU,iBAAmB,IAAKhB,KAAKJ,OAAOqB,WAAWjB,KAAKsI,WAAY,UACvG1H,EAAWE,KAAKd,KAAKe,SAAST,EAASY,cAAgB,IAAKlB,KAAKJ,OAAOuB,QAAQnB,KAAKsI,WAAY,UACjG/G,QAAQC,IAAIZ,GAAYqB,MAAMC,IAC5BlC,KAAKoI,MAAO,EACZpI,KAAKmI,MAAQ,EACb,MAAMsE,EAAoBrG,EAAgBzD,EAAI,EAAGA,EAAG0D,WAAYC,uBAAuBC,MAAO,EAAG,GACjGC,EACE7D,EACA3C,KAAKyC,UAAUV,IAAIzB,EAASU,iBAAmB,KAC/C,cACA,EACAhB,KAAKJ,OAAO6G,YAAYC,UAAU,GAClC1G,KAAKJ,OAAO6G,YAAYC,UAAU,GAClC/D,EAAG0D,WACHoG,EACAnG,uBAAuBC,MACvB,EACAD,uBAAuBK,GACvBL,uBAAuBvB,OAEzB/E,KAAK4G,YAAYvG,IAAIC,EAASuG,mBAAqB,IAAK4F,GACxD,MAAMC,EAAoBtG,EAAgBzD,EAAI,EAAGA,EAAG0D,WAAYC,uBAAuBC,MAAO,EAAG,GACjGC,EACE7D,EACA3C,KAAKyC,UAAUV,IAAIzB,EAASU,iBAAmB,KAC/C,cACA,EACAhB,KAAKJ,OAAO6G,YAAYC,UAAU,GAClC1G,KAAKJ,OAAO6G,YAAYC,UAAU,GAClC/D,EAAG0D,WACHqG,EACApG,uBAAuBC,MACvB,EACAD,uBAAuBK,GACvBL,uBAAuBvB,OAEzB/E,KAAK4G,YAAYvG,IAAIC,EAASuG,mBAAqB,IAAK6F,GAExD,MAAMC,EAAkBvG,EAAgBzD,EAAI,EAAGA,EAAG0D,WAAYC,uBAAuBS,MAAO,EAAG,GAC/FP,EACE7D,EACA3C,KAAKyC,UAAUV,IAAIzB,EAASY,cAAgB,KAC5C,UACA,EACAlB,KAAKJ,OAAO6G,YAAYtF,QAAQ,GAChCnB,KAAKJ,OAAO6G,YAAYtF,QAAQ,GAChCwB,EAAG0D,WACHsG,EACArG,uBAAuBS,MACvB,EACAT,uBAAuBU,KACvBV,uBAAuBW,eAEzBjH,KAAK4G,YAAYvG,IAAIC,EAAS4G,gBAAkB,IAAKyF,GACrD,MAAMC,EAAkBxG,EAAgBzD,EAAI,EAAGA,EAAG0D,WAAYC,uBAAuBS,MAAO,EAAG,GAC/FP,EACE7D,EACA3C,KAAKyC,UAAUV,IAAIzB,EAASY,cAAgB,KAC5C,UACA,EACAlB,KAAKJ,OAAO6G,YAAYtF,QAAQ,GAChCnB,KAAKJ,OAAO6G,YAAYtF,QAAQ,GAChCwB,EAAG0D,WACHuG,EACAtG,uBAAuBS,MACvB,EACAT,uBAAuBU,KACvBV,uBAAuBW,eAEzBjH,KAAK4G,YAAYvG,IAAIC,EAAS4G,gBAAkB,IAAK0F,EAAgB,GAEzE,EAGF,MAAM9I,EAAaA,CAACnB,EAAIkK,EAAWC,EAAWC,EAAcC,EAAcC,KACxE,MAAMC,EAAUvK,EAAGwK,gBAQnB,OAPAxK,EAAGyK,kBAAkBF,EAASvK,EAAG0K,mBAAoBR,GACrDlK,EAAGyK,kBAAkBF,EAASvK,EAAG2K,mBAAoBR,GACrDnK,EAAGyK,kBAAkBF,EAASvK,EAAG4K,eAAgBR,GACjDpK,EAAGyK,kBAAkBF,EAASvK,EAAG6K,eAAgBR,GAC7CC,GACFtK,EAAGyK,kBAAkBF,EAASvK,EAAG8K,eAAgBR,GAE5CC,CAAO,EAGV9G,EAAkBA,CAACzD,EAAI+K,EAAWC,EAAQC,EAAgBvC,EAAOC,KACrE,MAAMuC,EAAUlL,EAAGmL,gBAMnB,OALc,IAAVzC,GAA0B,IAAXC,IACjB3I,EAAG0G,YAAYsE,EAAQE,GACvBlL,EAAGoL,aAAaJ,EAAQD,EAAWE,EAAgBvC,EAAOC,GAC1D3I,EAAG0G,YAAYsE,EAAQ,OAElBE,CAAO,EAGVnJ,EAAqBA,CAAC/B,EAAIgL,EAAQK,EAAQC,KAC9C,MAAMC,EAAMvL,EAAGsD,eAGf,OAFAtD,EAAGkC,WAAW8I,EAAQO,GACtBvL,EAAGuD,WAAWyH,EAAQK,EAAQC,GACvBC,CAAG,EAGN1H,EAAcA,CAAC7D,EAAIwL,EAAOC,EAAUC,EAAOhD,EAAOC,EAAQqC,EAAQE,EAASD,EAAgBF,EAAWY,EAAQxC,KAKlH,GAJAnJ,EAAG4L,YAAY5L,EAAG6L,oBAAqB,GACvC7L,EAAG0G,YAAYsE,EAAQE,GACvBlL,EAAGoL,aAAaJ,EAAQD,EAAWE,EAAgBvC,EAAOC,GAC1D3I,EAAG0G,YAAYsE,EAAQ,MACN,gBAAbS,EAA4B,CAC9B,MAAMK,EAAY,IAAIC,WAAWP,EAAM9C,MAAQ8C,EAAM7C,OAAS,GACxDqD,EAAehM,EAAGmL,gBACxBnL,EAAG0G,YAAY1G,EAAG0D,WAAYsI,GAC9BhM,EAAGiM,WAAWjM,EAAG0D,WAAY,EAAG1D,EAAGoE,MAAOoH,EAAM9C,MAAO8C,EAAM7C,OAAQ,EAAG3I,EAAGqE,KAAMrE,EAAGsE,cAAekH,GACnGxL,EAAGkM,cAAclM,EAAG0D,WAAY1D,EAAG0K,mBAAoB1K,EAAGoB,QAC1DpB,EAAGkM,cAAclM,EAAG0D,WAAY1D,EAAG2K,mBAAoB3K,EAAGoB,QAE1D,MAAM+K,EAAMnM,EAAGoM,oBACfpM,EAAGqM,gBAAgBrM,EAAGsM,YAAaH,GACnCnM,EAAGuM,qBAAqBvM,EAAGsM,YAAatM,EAAGwM,kBAAmBxM,EAAG0D,WAAYsI,EAAc,GAE3FhM,EAAGyM,WAAW,EAAG,EAAGjB,EAAM9C,MAAO8C,EAAM7C,OAAQ3I,EAAGqE,KAAMrE,EAAGsE,cAAewH,GAC1E9L,EAAGqM,gBAAgBrM,EAAGsM,YAAa,MAEnCtM,EAAG0G,YAAYsE,EAAQE,GACvBlL,EAAG0M,cAAc1B,EAAQU,EAAO,EAAG,EAAGhD,EAAOC,EAAQgD,EAAQxC,EAAM,IAAI/L,aAAa0O,EAAUa,SAC1F5B,EAAY,GACd/K,EAAG4M,eAAe5B,GAEpBhL,EAAG0G,YAAYsE,EAAQ,KACzB,KAAwB,YAAbS,IACTzL,EAAG0G,YAAYsE,EAAQE,GACvBlL,EAAG0M,cAAc1B,EAAQU,EAAO,EAAG,EAAGhD,EAAOC,EAAQgD,EAAQxC,EAAMqC,GAC/DT,EAAY,GACd/K,EAAG4M,eAAe5B,GAEpBhL,EAAG0G,YAAYsE,EAAQ,MACzB,EAGInD,EAAwBA,CAAC7H,EAAI0L,EAAOhD,EAAOC,EAAQqC,EAAQE,EAAS2B,EAASC,EAASnB,EAAQxC,KAClGnJ,EAAG4L,YAAY5L,EAAG+M,gCAAgC,GAClD/M,EAAG4L,YAAY5L,EAAG6L,oBAAqB,GACvC7L,EAAG0G,YAAYsE,EAAQE,GACvBlL,EAAG0M,cAAc1B,EAAQU,EAAOmB,EAASC,EAASpE,EAAOC,EAAQgD,EAAQxC,EAAM,GAC/EnJ,EAAG0G,YAAYsE,EAAQ,KAAK,EAGxBrN,EAAW,CACfC,cAAe,gBACfC,gBAAiB,kBACjBC,kBAAmB,oBACnBC,oBAAqB,sBACrBiP,aAAc,eACdC,eAAgB,iBAChBC,YAAa,cACbC,cAAe,gBACfjM,UAAW,YACXI,UAAW,YACXjD,iBAAkB,mBAClBE,cAAe,gBACfE,wBAAyB,0BACzB2O,wBAAyB,0BACzBC,oBAAqB,sBACrBnJ,mBAAoB,qBACpBK,gBAAiB,kBACjBE,0BAA2B,4BAC3B6I,0BAA2B,4BAC3BC,sBAAuB,wBACvBpI,aAAc,gBAGhB,MAAMhF,EACJnD,WAAAA,CAAYgD,GACV3C,KAAKmQ,QAAUxN,EAAGyN,eACpB,CAEApN,SAAAA,CAAUL,EAAI0N,EAAcC,EAAgBC,GAC1C,GAAIvQ,KAAKmQ,QAAS,CAChB,MAAMK,EAAe7N,EAAG8N,aAAa9N,EAAG+N,eAClCC,EAAiBhO,EAAG8N,aAAa9N,EAAGiO,iBAC1CjO,EAAGkO,aAAaL,EAAcH,GAC9B1N,EAAGkO,aAAaF,EAAgBL,GAChC3N,EAAGmO,cAAcN,GACjB7N,EAAGmO,cAAcH,GACZhO,EAAGoO,mBAAmBP,EAAc7N,EAAGqO,iBAE1CC,QAAQC,MAAM,2BAA6BvO,EAAGwO,iBAAiBX,IAGjE7N,EAAGyO,aAAapR,KAAKmQ,QAASK,GAC9B7N,EAAGyO,aAAapR,KAAKmQ,QAASQ,GAC1BJ,GACF5N,EAAG0O,0BAA0BrR,KAAKmQ,QAASI,EAAa5N,EAAG2O,kBAE7D3O,EAAG4O,YAAYvR,KAAKmQ,QACtB,CACF,CAEAzG,UAAAA,CAAW/G,GACTA,EAAG+G,WAAW1J,KAAKmQ,QACrB,CAEAvG,QAAAA,CAASjH,EAAI6O,EAAMC,GACjB,MAAMC,EAAW/O,EAAGgP,mBAAmB3R,KAAKmQ,QAASqB,GACrD7O,EAAGiP,UAAUF,EAAUD,EACzB,CAEAvG,MAAAA,CAAOvI,EAAI6O,EAAMC,GACf,MAAMC,EAAW/O,EAAGgP,mBAAmB3R,KAAKmQ,QAASqB,GACrD7O,EAAGkP,UAAUH,EAAUD,EACzB,CAEA9H,QAAAA,CAAShH,EAAI6O,EAAMM,GACjB,MAAMJ,EAAW/O,EAAGgP,mBAAmB3R,KAAKmQ,QAASqB,GACrD7O,EAAGoP,WAAWL,EAAUI,EAC1B,CAEA3G,SAAAA,CAAUxI,EAAI6O,EAAMQ,EAAQC,GAC1B,MAAMC,EAAkBvP,EAAGgP,mBAAmB3R,KAAKmQ,QAASqB,GAC5D7O,EAAGwP,UAAUD,EAAiBF,EAAQC,EACxC,CAEAG,SAAAA,CAAUzP,EAAI6O,EAAMQ,EAAQC,EAAQI,GAClC,MAAMH,EAAkBvP,EAAGgP,mBAAmB3R,KAAKmQ,QAASqB,GAC5D7O,EAAG2P,UAAUJ,EAAiBF,EAAQC,EAAQI,EAChD,CAEAE,SAAAA,CAAU5P,EAAI6O,EAAMQ,EAAQC,EAAQI,EAAQG,GAC1C,MAAMN,EAAkBvP,EAAGgP,mBAAmB3R,KAAKmQ,QAASqB,GAC5D7O,EAAG8P,UAAUP,EAAiBF,EAAQC,EAAQI,EAAQG,EACxD,CAEAE,OAAAA,CAAQ/P,EAAI6O,EAAMM,GAChB,MAAMI,EAAkBvP,EAAGgP,mBAAmB3R,KAAKmQ,QAASqB,GAC5D7O,EAAGgQ,WAAWT,EAAiBJ,EACjC,CAEAvG,OAAAA,CAAQ5I,EAAI6O,EAAMtI,GAChB,MAAMgJ,EAAkBvP,EAAGgP,mBAAmB3R,KAAKmQ,QAASqB,GAC5D7O,EAAGiQ,iBAAiBV,GAAiB,EAAOhJ,EAC9C,CAEAY,eAAAA,CAAgBnH,EAAI6O,EAAMqB,GACxB,MAAMX,EAAkBvP,EAAGmQ,qBAAqB9S,KAAKmQ,QAASqB,GAC9D7O,EAAGoQ,oBAAoB/S,KAAKmQ,QAAS+B,EAAiBW,EACxD,EAGK,MAAMrO,EAAOA,CAACwO,EAAKC,KACnBA,IACHA,EAAMD,EACNA,EAAM,GAED9P,KAAK2G,UAAYoJ,EAAMD,GAAOA,G,uBCxiCvC,GAAeE,EAAAA,EAAAA,IAAgB,CAC7BC,KAAAA,GACE,MAAMC,GAAYpU,EAAAA,EAAAA,MAClB,IAAIgN,EACJ,MAAMqH,EAAa,IAAI3T,EAAW,CAChCyB,QAAS,CACP,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,8BAEFjB,YAAa,CACXoT,YAAa,GACbC,gBAAiB,GACjBpT,cAAe,GACfkD,iBAAkB,OAClBkE,eAAgB,MAElBiM,OAAQ,CAAC,kBAAoB,kBAAoB,kBAAoB,oBACrEjQ,aAAc,CACZG,KAAM,OACNF,MAAO,OACPG,KAAM,OACNF,MAAO,QAETxC,WAAY,CACV,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,4BAEFI,WAAY,CACVC,iBAAkB,sCAClBmS,iBAAkB,sCAClBC,aAAc,mCAEhBjN,YAAa,CACXtF,QAAS,CAAC,KAAM,KAChBuF,UAAW,CAAC,KAAM,KAClBrF,WAAY,CAAC,KAAM,SAGjBsS,EAAcA,KAClBN,EAAW9G,YAAY,GAAG,EAEtBqH,EAAWC,IACf,MAAMC,EAAiD,CACrDV,UAAWA,EAAU3B,MACrBsC,MAAO,oDACPC,OAAQ,CAAC,WAAY,WACrBC,KAAM,IACNC,WAAW,EACXC,WAAW,EACXC,YAAa,6FAEfpI,EAAM,IAAIqI,IAAAA,KAAaP,GACvB9H,EAAIsI,GAAG,QAAQ,KACbtI,EAAIuI,SAASV,EAAM,GACnB,EAQJ,OALAW,EAAAA,EAAAA,KAAUC,UACR,MAAMZ,QAAcR,EAAW3H,oBAAoB,QACnDkI,EAAQC,EAAM,IAGT,CAAET,YAAWO,cACtB,I,QC/GF,MAAMe,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASzV,KAEpE,O,uBCTe,SAAS0V,EAAQC,GAG9B,OAAOD,EAAU,mBAAqBE,QAAU,iBAAmBA,OAAOC,SAAW,SAAUF,GAC7F,cAAcA,CAChB,EAAI,SAAUA,GACZ,OAAOA,GAAO,mBAAqBC,QAAUD,EAAIjV,cAAgBkV,QAAUD,IAAQC,OAAOE,UAAY,gBAAkBH,CAC1H,EAAGD,EAAQC,EACb,CCPe,SAASI,EAAaC,EAAOC,GAC1C,GAAuB,WAAnBP,EAAQM,IAAiC,OAAVA,EAAgB,OAAOA,EAC1D,IAAIE,EAAOF,EAAMJ,OAAOO,aACxB,QAAaC,IAATF,EAAoB,CACtB,IAAIjT,EAAMiT,EAAK9I,KAAK4I,EAAOC,GAAQ,WACnC,GAAqB,WAAjBP,EAAQzS,GAAmB,OAAOA,EACtC,MAAM,IAAIoT,UAAU,+CACtB,CACA,OAAiB,WAATJ,EAAoBK,OAASC,QAAQP,EAC/C,CCRe,SAASQ,EAAeC,GACrC,IAAIjU,EAAM2T,EAAYM,EAAK,UAC3B,MAAwB,WAAjBf,EAAQlT,GAAoBA,EAAM8T,OAAO9T,EAClD,CCJe,SAAS5B,EAAgB+U,EAAKnT,EAAKgQ,GAYhD,OAXAhQ,EAAMkU,EAAclU,GAChBA,KAAOmT,EACTgB,OAAOC,eAAejB,EAAKnT,EAAK,CAC9BgQ,MAAOA,EACPqE,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZpB,EAAInT,GAAOgQ,EAENmD,CACT,C","sources":["webpack://front/./src/views/FlowView.vue?6222","webpack://front/./node_modules/mapbox-flow/flow-util.js","webpack://front/./src/views/FlowView.vue?e22d","webpack://front/./src/views/FlowView.vue","webpack://front/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://front/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://front/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://front/./node_modules/@babel/runtime/helpers/esm/defineProperty.js"],"sourcesContent":["import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = {\n  class: \"container\",\n  ref: \"container\"\n}\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512))\n}","import axios from \"axios\";\r\n\r\nexport class FlowMapbox {\r\n  _gl = null;\r\n  _imageMap = new Map();\r\n  _textureMap = new Map();\r\n  _samplerMap = new Map();\r\n  _shaderScriptMap = new Map();\r\n\r\n  _updateProgram = null;\r\n  _trajectoryProgram = null;\r\n\r\n  _simulationVAO = null;\r\n  _simulationVAO2 = null;\r\n  _renderVAO = null;\r\n  _renderVAO2 = null;\r\n  _XFBO = null;\r\n  _XFBO2 = null;\r\n  _simulationBuffer = null;\r\n  _xfSimulationBuffer = null;\r\n  _UBO = null;\r\n  _sVAO = null;\r\n  _rVAO = null;\r\n  _xfBO = null;\r\n  _unPackBuffer = null;\r\n  _uboMapBuffer = new Float32Array(12);\r\n  _textureOffsetArray = [];\r\n\r\n  _beginBlock = -1.0;\r\n\r\n  count = 0;\r\n  flag = true;\r\n  imagePre = 0;\r\n  imageNext = 1;\r\n\r\n  constructor(option) {\r\n    this.option = option;\r\n    this._segmentPrepare = option.constraints.maxSegmentNum;\r\n    this._shaderScriptMap.set(\r\n      FlowEnum.UPDATE_VERTEX,\r\n      `#version 300 es\r\n    precision highp float;\r\n\r\n    layout (location=0) in vec3 particleInfo;\r\n    layout (location=1) in float age;\r\n\r\n    layout (std140) uniform FlowFieldUniforms\r\n    {\r\n        float progress;\r\n        float segmentNum;\r\n        float fullLife;\r\n        float dropRate;\r\n        float dropRateBump;\r\n        float speedFactor;\r\n        vec4 flowBoundary; // vec4(uMin, vMin, uMax, vMax)\r\n        \r\n    };\r\n\r\n    uniform sampler2D flowField[2];\r\n    uniform sampler2D mask[2];\r\n    // uniform sampler2D validAddress;\r\n    uniform float randomSeed;\r\n\r\n    out vec3 newInfo;\r\n    out float aliveTime;\r\n\r\n    // pseudo-random generator\r\n    float rand(const vec2 co) {\r\n        const vec3 rand_constants = vec3(12.9898, 78.233, 4375.85453);\r\n        float t = dot(rand_constants.xy, co);\r\n        return abs(fract(sin(t) * (rand_constants.z + t)));\r\n    }\r\n\r\n    float drop(float velocity, vec2 uv)\r\n    {\r\n        vec2 seed = (particleInfo.xy + uv) * randomSeed;\r\n        float drop_rate = dropRate + velocity * dropRateBump;\r\n        return step(drop_rate, rand(seed));\r\n    }\r\n\r\n    float is_in_flow_progress(vec2 resolution, vec2 uv)\r\n    {\r\n        ivec2 texcoords = ivec2(uv * resolution);\r\n        vec4 color1 = texelFetch(mask[0], texcoords, 0);\r\n        vec4 color2 = texelFetch(mask[1], texcoords, 0);\r\n\r\n        ivec2 xy1 = ivec2((int(color1.r * 255.0) << 8) + int(color1.g * 255.0), (int(color1.b * 255.0) << 8) + int(color1.a * 255.0));\r\n        ivec2 xy2 = ivec2((int(color2.r * 255.0) << 8) + int(color2.g * 255.0), (int(color2.b * 255.0) << 8) + int(color2.a * 255.0));\r\n        float isInFlow1 = float((xy1 == texcoords));\r\n        float isInFlow2 = float((xy2 == texcoords));\r\n\r\n        return step(0.0, 2.0 * mix(isInFlow1, isInFlow2, progress) - 1.0);\r\n    }\r\n\r\n    vec2 get_speed(sampler2D sFlowField, vec2 uv)\r\n    {\r\n        vec2 speed_tl = texture(sFlowField, uv).rg;\r\n        return speed_tl;\r\n    }\r\n\r\n    vec2 lookup_speed(vec2 uv, vec2 resolution)\r\n    {\r\n        vec2 lSpeed = get_speed(flowField[0], uv);\r\n        vec2 nSpeed = get_speed(flowField[1], uv);\r\n        vec2 speed = mix(lSpeed, nSpeed, progress);\r\n        return mix(flowBoundary.xy, flowBoundary.zw, speed);\r\n    }\r\n\r\n    float speed_rate(vec2 speed)\r\n    {\r\n        return length(speed) / length(flowBoundary.zw);\r\n    }\r\n\r\n    void die(vec2 resolution)\r\n    {\r\n        vec2 seed = randomSeed + particleInfo.xy;\r\n\r\n        vec2 uv = vec2(rand(seed + 1.3), rand(seed + 2.1));\r\n        vec4 rebirthColor = texture(mask[1], uv);\r\n        float rebirth_x = float((int(rebirthColor.r * 255.0) << 8) + int(rebirthColor.g * 255.0));\r\n        float rebirth_y = float((int(rebirthColor.b * 255.0) << 8) + int(rebirthColor.a * 255.0));\r\n        rebirth_x = rebirth_x + rand(seed + rebirth_x);\r\n        rebirth_y = rebirth_y + rand(seed + rebirth_y);\r\n\r\n        vec2 rebirthPos = vec2(rebirth_x, rebirth_y) / resolution;\r\n        newInfo = vec3(rebirthPos, speed_rate(lookup_speed(rebirthPos, resolution)));\r\n        aliveTime = age + 1.0;\r\n    }\r\n\r\n    void simulation(vec2 resolution)\r\n    {\r\n        vec2 uv = particleInfo.xy;\r\n        vec2 speed = lookup_speed(uv, resolution);\r\n        float speedRate = speed_rate(speed);\r\n\r\n        vec2 nPos = vec2(particleInfo.xy + speed * speedFactor / resolution);\r\n        nPos = clamp(nPos, vec2(0.0), vec2(1.0));\r\n        float dropped = drop(speedRate, uv) * is_in_flow_progress(resolution, nPos);\r\n\r\n        newInfo = mix(particleInfo, vec3(nPos, speedRate), dropped);\r\n        aliveTime = mix(fullLife - segmentNum, age + 1.0, dropped);\r\n    }\r\n\r\n    void freeze()\r\n    {\r\n        newInfo = particleInfo;\r\n        aliveTime = age + 1.0;\r\n    }\r\n\r\n    void rebirth()\r\n    {\r\n        newInfo = particleInfo;\r\n        aliveTime = 0.0;\r\n    }\r\n\r\n    void main()\r\n    {\r\n        vec2 resolution = vec2(textureSize(mask[1], 0));\r\n        \r\n        if (age < fullLife - segmentNum)\r\n        {\r\n            simulation(resolution);\r\n        }\r\n        else if (age == fullLife)\r\n        {\r\n            die(resolution);\r\n        }\r\n        else if (abs(fullLife - age) <= segmentNum)\r\n        {\r\n            freeze();\r\n        }\r\n        else\r\n        {\r\n            rebirth();\r\n        }\r\n    }\r\n    `\r\n    );\r\n    this._shaderScriptMap.set(\r\n      FlowEnum.UPDATE_FRAGMENT,\r\n      `#version 300 es\r\n    precision highp float;\r\n\r\n    void main() \r\n    {\r\n    }\r\n    `\r\n    );\r\n    this._shaderScriptMap.set(\r\n      FlowEnum.TRAJECTORY_VERTEX,\r\n      `#version 300 es\r\n    precision highp float;\r\n\r\n    layout (location = 0) in float isAlive;\r\n\r\n    layout (std140) uniform FlowFieldUniforms\r\n    {\r\n        float progress;\r\n        float segmentNum;\r\n        float fullLife;\r\n        float dropRate;\r\n        float dropRateBump;\r\n        float speedFactor;\r\n        float colorScheme;\r\n        vec4 flowBoundary;\r\n    };\r\n\r\n    uniform sampler2D particlePool;\r\n    uniform sampler2D projectionTexture;\r\n    uniform int blockNum;\r\n    uniform int beginBlock;\r\n    uniform int blockSize;\r\n    uniform float fillWidth;\r\n    uniform float aaWidth;\r\n    uniform vec2 viewport;\r\n    uniform mat4 u_matrix;\r\n\r\n    out struct Stream_line_setting \r\n    {\r\n        float edgeParam;\r\n        float alphaDegree;\r\n        float velocity; // a percentage\r\n        float isDiscarded;\r\n    } sls;\r\n\r\n\r\n    vec4 ReCoordinate(vec2 pos) {\r\n\r\n        vec3 geoPos;\r\n        geoPos = texture(projectionTexture, pos).xyz;\r\n        vec4 res = u_matrix * vec4(geoPos, 1.0);\r\n        return res;\r\n    }\r\n\r\n    ivec2 get_uv(int vertexIndex)\r\n    {\r\n        // calculate the blockIndex of the current vertx\r\n        int blockIndex = (beginBlock - vertexIndex + blockNum) % blockNum;\r\n\r\n        // calculate original uv of the block\r\n        int textureWidth = textureSize(particlePool, 0).x;\r\n        int columnNum = textureWidth / blockSize;\r\n        ivec2 blockUV = ivec2(blockIndex % columnNum, blockIndex / columnNum) * blockSize;\r\n\r\n        // calculate uv of the current vertex\r\n        ivec2 vertexUV = blockUV + ivec2(gl_InstanceID % blockSize, gl_InstanceID / blockSize);\r\n\r\n        return vertexUV;\r\n    }\r\n\r\n    vec4 transfer_to_clip_space(vec2 pos)\r\n    {\r\n        return ReCoordinate(pos);\r\n    }\r\n\r\n    vec4 get_clip_position(ivec2 uv)\r\n    {\r\n        return transfer_to_clip_space(texelFetch(particlePool, uv, 0).rg);\r\n    }\r\n\r\n    vec2 get_vector(vec2 beginVertex, vec2 endVertex)\r\n    {\r\n        return normalize(endVertex - beginVertex);\r\n    }\r\n\r\n    void main()\r\n    {\r\n        // get screen positions from particle pool\r\n        float parity = float(gl_VertexID % 2);\r\n        int currentVertex = gl_VertexID / 2;\r\n        int nextVertex = currentVertex + 1;\r\n        ivec2 c_uv = get_uv(currentVertex);\r\n        ivec2 n_uv = get_uv(nextVertex);\r\n        vec4 cv_pos_CS = get_clip_position(c_uv);\r\n        vec4 nv_pos_CS = get_clip_position(n_uv);\r\n        vec2 cv_pos_SS = cv_pos_CS.xy / cv_pos_CS.w;\r\n        vec2 nv_pos_SS = nv_pos_CS.xy / nv_pos_CS.w;\r\n\r\n        // calculate the screen offset\r\n        float speedRate = texelFetch(particlePool, c_uv, 0).b;\r\n        float lineWidth = (fillWidth + aaWidth * 2.0);// * mix(2.0, 1.0, clamp(pow(speedRate * 10.0, 3.0), 0.0, 1.0));\r\n        vec2 cn_vector = get_vector(cv_pos_SS, nv_pos_SS);\r\n        float screenOffset = lineWidth / 2.0;\r\n\r\n        // translate current vertex position\r\n        vec3 view = vec3(0.0, 0.0, 1.0);\r\n        vec2 v_offset = normalize(cross(view, vec3(cn_vector, 0.0))).xy * mix(1.0, -1.0, parity);  //等价于以下\r\n        // vec2 v_offset = normalize(vec2(-cn_vector.y, cn_vector.x)).xy * mix(1.0, -1.0, parity);\r\n        \r\n        vec2 vertexPos_SS = cv_pos_SS + v_offset * screenOffset / viewport;\r\n\r\n        //////////////\r\n        // calculate vertex position in screen coordinates\r\n        vec2 vertexPos_CS = vertexPos_SS * cv_pos_CS.w;\r\n        gl_Position = vec4(vertexPos_CS, 0.0, cv_pos_CS.w);\r\n\r\n        // prepare for anti-aliasing\r\n        sls.edgeParam = 2.0 * parity - 1.0;\r\n\r\n        float segmentRate = float(currentVertex) / segmentNum;\r\n        sls.alphaDegree = 1.0 - segmentRate;\r\n\r\n        sls.velocity = speedRate;\r\n        sls.isDiscarded = isAlive;\r\n    }\r\n    `\r\n    );\r\n    this._shaderScriptMap.set(\r\n      FlowEnum.TRAJECTORY_FRAGMENT,\r\n      `#version 300 es\r\n    precision highp float;\r\n\r\n    in struct Stream_line_setting \r\n    {\r\n        float edgeParam;\r\n        float alphaDegree;\r\n        float velocity; // a percentage\r\n        float isDiscarded;\r\n    } sls;\r\n\r\n    layout (std140) uniform FlowFieldUniforms\r\n    {\r\n        float progress;\r\n        float segmentNum;\r\n        float fullLife;\r\n        float dropRate;\r\n        float dropRateBump;\r\n        float speedFactor;\r\n        float colorScheme;\r\n        vec4 flowBoundary;\r\n    };\r\n    uniform float fillWidth;\r\n    uniform float aaWidth;\r\n\r\n    out vec4 fragColor;\r\n\r\n    int rampColors0[8] = int[](\r\n        0x3288bd,\r\n        0x66c2a5,\r\n        0xabdda4,\r\n        0xe6f598,\r\n        0xfee08b,\r\n        0xfdae61,\r\n        0xf46d43,\r\n        0xd53e4f\r\n    );\r\n\r\n    int rampColors1[8] = int[](\r\n        0x8c510a,\r\n        0xbf812d,\r\n        0xdfc27d,\r\n        0xf6e8c3,\r\n        0xc7eae5,\r\n        0x80cdc1,\r\n        0x35978f,\r\n        0x01665e\r\n    );\r\n    int rampColors2[8] = int[](\r\n        0x8dd3c7,\r\n        0xffffb3,\r\n        0xbebada,\r\n        0xfb8072,\r\n        0x80b1d3,\r\n        0xfdb462,\r\n        0xb3de69,\r\n        0xfccde5\r\n    );\r\n\r\n    int[8] rampColors()\r\n    {\r\n        if (colorScheme == 0.0)\r\n            return rampColors0;\r\n        if (colorScheme == 1.0)\r\n            return rampColors1;\r\n        if (colorScheme == 2.0)\r\n            return rampColors2;\r\n    } \r\n\r\n    vec3 colorFromInt(int color)\r\n    {\r\n        float b = float(color & 0xFF) / 255.0;\r\n        float g = float((color >> 8) & 0xFF) / 255.0;\r\n        float r = float((color >> 16) & 0xFF) / 255.0;\r\n\r\n        return vec3(r, g, b);\r\n    }\r\n\r\n    vec3 velocityColor(float speed)\r\n    {\r\n        float bottomIndex = floor(speed * 10.0);\r\n        float topIndex = mix(bottomIndex + 1.0, 7.0, step(6.0, bottomIndex));\r\n        float interval = mix(1.0, 4.0, step(6.0, bottomIndex));\r\n\r\n        vec3 slowColor = colorFromInt(rampColors()[int(bottomIndex)]);\r\n        vec3 fastColor = colorFromInt(rampColors()[int(topIndex)]);\r\n\r\n        return mix(slowColor, fastColor, (speed * 10.0 - float(bottomIndex)) / interval);\r\n    }\r\n\r\n    float getAlpha(float param)\r\n    {\r\n        if (aaWidth == 0.0) return 1.0;\r\n        float alpha = 1.0 - sin(clamp((param * (0.5 * fillWidth + aaWidth) - 0.5 * fillWidth) / aaWidth, 0.0, 1.0) * 2.0 / 3.141592653);\r\n        return alpha;\r\n    }\r\n\r\n    void main() \r\n    {\r\n        if (sls.isDiscarded >= fullLife) discard; \r\n        float alpha = getAlpha(abs(sls.edgeParam));\r\n\r\n        // vec3 color = mix(colorFromInt(rampColors[int(sls.velocity * 7.0)]), colorFromInt(rampColors[int(sls.velocity * 7.0 + 0.5)]), fract(sls.velocity * 7.0));\r\n        vec3 color = velocityColor(sls.velocity);\r\n        // color = mix(vec3(0.7), color, alpha);\r\n        // fragColor = vec4(1.0, 0.0, 0.0, 1.0);\r\n        fragColor = vec4(color, 1.0) * alpha * sls.alphaDegree;\r\n        // fragColor = vec4(1.0) * alpha;\r\n    }\r\n    `\r\n    );\r\n  }\r\n  async prepareAsyncImage() {\r\n    const promiseArr = [];\r\n    for (let i = 0; i < 2; i++) {\r\n      promiseArr.push(this.getImage(FlowEnum.FLOW_FIELD_IMAGE + i, this.option.flowFields[i], \"flipY\"));\r\n      promiseArr.push(this.getImage(FlowEnum.SEEDING_IMAGE + i, this.option.seeding[i], \"flipY\"));\r\n    }\r\n    promiseArr.push(this.getImage(FlowEnum.PROJECTION_MAPBOX_IMAGE, this.option.projection.projectionMapbox, \"flipY\"));\r\n    await Promise.all(promiseArr);\r\n  }\r\n\r\n  getImage(key, address, flip) {\r\n    return new Promise((resolve, reject) => {\r\n      axios.get(address, { responseType: \"blob\" }).then((res) => {\r\n        createImageBitmap(res.data, { imageOrientation: flip, premultiplyAlpha: \"none\", colorSpaceConversion: \"default\" }).then((imageBitmap) => {\r\n          this._imageMap.set(key, imageBitmap);\r\n          resolve(null);\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  prepareResource(gl) {\r\n    this._gl = gl;\r\n    // 绑定shader\r\n    this._updateProgram = new GlProgram(gl);\r\n    this._trajectoryProgram = new GlProgram(gl);\r\n\r\n    this._updateProgram.setShader(gl, this._shaderScriptMap.get(FlowEnum.UPDATE_VERTEX), this._shaderScriptMap.get(FlowEnum.UPDATE_FRAGMENT), [\"newInfo\", \"aliveTime\"]);\r\n    this._trajectoryProgram.setShader(gl, this._shaderScriptMap.get(FlowEnum.TRAJECTORY_VERTEX), this._shaderScriptMap.get(FlowEnum.TRAJECTORY_FRAGMENT));\r\n\r\n    const maxBlockSize = Math.ceil(Math.sqrt(this.option.constraints.maxTrajectoryNum)); //1024\r\n\r\n    this._uboMapBuffer[8] = this.option.flowBoundary.uMin;\r\n    this._uboMapBuffer[9] = this.option.flowBoundary.vMin;\r\n    this._uboMapBuffer[10] = this.option.flowBoundary.uMax;\r\n    this._uboMapBuffer[11] = this.option.flowBoundary.vMax;\r\n\r\n    // 设置sampler\r\n    this._samplerMap.set(FlowEnum.L_SAMPLER, addSampler(gl, gl.LINEAR, gl.LINEAR, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE));\r\n    this._samplerMap.set(FlowEnum.N_SAMPLER, addSampler(gl, gl.NEAREST, gl.NEAREST, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE));\r\n\r\n    // 设置simulationVAO buffer\r\n    this._simulationVAO = gl.createVertexArray();\r\n    gl.bindVertexArray(this._simulationVAO);\r\n    const particleMapBuffer = new Float32Array(maxBlockSize * maxBlockSize * 3).fill(0);\r\n    for (let i = 0; i < maxBlockSize * maxBlockSize; i++) {\r\n      particleMapBuffer[i * 3 + 0] = rand(0, 1.0);\r\n      particleMapBuffer[i * 3 + 1] = rand(0, 1.0);\r\n      particleMapBuffer[i * 3 + 2] = 0.0;\r\n    }\r\n    this._simulationBuffer = makeBufferBySource(gl, gl.ARRAY_BUFFER, particleMapBuffer, gl.DYNAMIC_DRAW);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._simulationBuffer);\r\n    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 3 * 4, 0);\r\n    gl.enableVertexAttribArray(0);\r\n    const particleCountdownArray = new Float32Array(this.option.constraints.maxTrajectoryNum).fill(this.option.constraints.maxSegmentNum * 9.0);\r\n    const lifeBuffer = makeBufferBySource(gl, gl.ARRAY_BUFFER, particleCountdownArray, gl.DYNAMIC_DRAW);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, lifeBuffer);\r\n    gl.vertexAttribPointer(1, 1, gl.FLOAT, false, 1 * 4, 0);\r\n    gl.enableVertexAttribArray(1);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    gl.bindVertexArray(null);\r\n\r\n    // 设置simulationVAO2 buffer\r\n    this._simulationVAO2 = gl.createVertexArray();\r\n    gl.bindVertexArray(this._simulationVAO2);\r\n    this._xfSimulationBuffer = makeBufferBySource(gl, gl.ARRAY_BUFFER, particleMapBuffer, gl.DYNAMIC_DRAW);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._xfSimulationBuffer);\r\n    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 3 * 4, 0);\r\n    gl.enableVertexAttribArray(0);\r\n    const xfLifeBuffer = makeBufferBySource(gl, gl.ARRAY_BUFFER, particleCountdownArray, gl.DYNAMIC_DRAW);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, xfLifeBuffer);\r\n    gl.vertexAttribPointer(1, 1, gl.FLOAT, false, 1 * 4, 0);\r\n    gl.enableVertexAttribArray(1);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    gl.bindVertexArray(null);\r\n\r\n    // 设置renderVAO buffer\r\n    this._renderVAO = gl.createVertexArray();\r\n    gl.bindVertexArray(this._renderVAO);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, lifeBuffer);\r\n    gl.vertexAttribPointer(0, 1, gl.FLOAT, false, 1 * 4, 0);\r\n    gl.vertexAttribDivisor(0, 1);\r\n    gl.enableVertexAttribArray(0);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    gl.bindVertexArray(null);\r\n\r\n    // 设置renderVA02 buffer\r\n    this._renderVAO2 = gl.createVertexArray();\r\n    gl.bindVertexArray(this._renderVAO2);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, xfLifeBuffer);\r\n    gl.vertexAttribPointer(0, 1, gl.FLOAT, false, 1 * 4, 0);\r\n    gl.vertexAttribDivisor(0, 1);\r\n    gl.enableVertexAttribArray(0);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    gl.bindVertexArray(null);\r\n\r\n    // 设置XFBO buffer\r\n    this._XFBO = gl.createTransformFeedback();\r\n    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this._XFBO);\r\n    gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, this._xfSimulationBuffer);\r\n    gl.bindBufferRange(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this._xfSimulationBuffer, 0, maxBlockSize * maxBlockSize * 12);\r\n    gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, xfLifeBuffer);\r\n    gl.bindBufferRange(gl.TRANSFORM_FEEDBACK_BUFFER, 1, xfLifeBuffer, 0, maxBlockSize * maxBlockSize * 4);\r\n    gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, null);\r\n    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\r\n\r\n    // 设置XFBO2 buffer\r\n    this._XFBO2 = gl.createTransformFeedback();\r\n    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this._XFBO2);\r\n    gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, this._simulationBuffer);\r\n    gl.bindBufferRange(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this._simulationBuffer, 0, maxBlockSize * maxBlockSize * 12);\r\n    gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, lifeBuffer);\r\n    gl.bindBufferRange(gl.TRANSFORM_FEEDBACK_BUFFER, 1, lifeBuffer, 0, maxBlockSize * maxBlockSize * 4);\r\n    gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, null);\r\n    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\r\n\r\n    this._UBO = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._UBO);\r\n    gl.bufferData(gl.ARRAY_BUFFER, 48, gl.DYNAMIC_DRAW);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n    // 设置纹理\r\n    for (let i = 0; i < 2; i++) {\r\n      const flowFieldTexture = createMyTexture(gl, 1, gl.TEXTURE_2D, WebGL2RenderingContext.RG32F, 0, 0);\r\n      fillTexture(\r\n        gl,\r\n        this._imageMap.get(FlowEnum.FLOW_FIELD_IMAGE + i),\r\n        \"Float_Point\",\r\n        0,\r\n        this.option.textureSize.flowField[0],\r\n        this.option.textureSize.flowField[1],\r\n        gl.TEXTURE_2D,\r\n        flowFieldTexture,\r\n        WebGL2RenderingContext.RG32F,\r\n        1,\r\n        WebGL2RenderingContext.RG,\r\n        WebGL2RenderingContext.FLOAT\r\n      );\r\n      this._textureMap.set(FlowEnum.FLOW_FIELD_TEXTURE + i, flowFieldTexture);\r\n\r\n      const seedingTexture = createMyTexture(gl, 1, gl.TEXTURE_2D, WebGL2RenderingContext.RGBA8, 0, 0);\r\n      fillTexture(\r\n        gl,\r\n        this._imageMap.get(FlowEnum.SEEDING_IMAGE + i),\r\n        \"Integer\",\r\n        0,\r\n        this.option.textureSize.seeding[0],\r\n        this.option.textureSize.seeding[1],\r\n        gl.TEXTURE_2D,\r\n        seedingTexture,\r\n        WebGL2RenderingContext.RGBA8,\r\n        1,\r\n        WebGL2RenderingContext.RGBA,\r\n        WebGL2RenderingContext.UNSIGNED_BYTE\r\n      );\r\n      this._textureMap.set(FlowEnum.SEEDING_TEXTURE + i, seedingTexture);\r\n    }\r\n    const projectionTexture = createMyTexture(gl, 1, gl.TEXTURE_2D, WebGL2RenderingContext.RG32F, 0, 0);\r\n    fillTexture(\r\n      gl,\r\n      this._imageMap.get(FlowEnum.PROJECTION_MAPBOX_IMAGE),\r\n      \"Float_Point\",\r\n      0,\r\n      this.option.textureSize.projection[0],\r\n      this.option.textureSize.projection[1],\r\n      gl.TEXTURE_2D,\r\n      projectionTexture,\r\n      WebGL2RenderingContext.RG32F,\r\n      1,\r\n      WebGL2RenderingContext.RG,\r\n      WebGL2RenderingContext.FLOAT\r\n    );\r\n    this._textureMap.set(FlowEnum.PROJECTION_MAPBOX_TEXTURE, projectionTexture);\r\n\r\n    const maxBlockColumn = Math.floor(this.option.constraints.maxTextureSize / maxBlockSize);\r\n    for (let i = 0; i < this.option.constraints.maxSegmentNum; i++) {\r\n      const offset = {\r\n        offsetX: (i % maxBlockColumn) * maxBlockSize,\r\n        offsetY: Math.floor(i / maxBlockColumn) * maxBlockSize,\r\n      };\r\n      this._textureOffsetArray.push(offset);\r\n    }\r\n    particleMapBuffer.fill(0);\r\n    const poolTexture = createMyTexture(gl, 1, gl.TEXTURE_2D, WebGL2RenderingContext.RGB32F, this.option.constraints.maxTextureSize, this.option.constraints.maxTextureSize);\r\n    this._textureMap.set(FlowEnum.POOL_TEXTURE, poolTexture);\r\n  }\r\n\r\n  tickLogicCount(gl) {\r\n    this._beginBlock = (this._beginBlock + 1) % 16;\r\n    this.swap();\r\n    const frequency = this.option.frequency ? this.option.frequency : 200;\r\n    this._uboMapBuffer[0] = this.count / frequency;\r\n    this._uboMapBuffer[1] = this.option.constraints.maxSegmentNum;\r\n    this._uboMapBuffer[2] = this.option.constraints.maxSegmentNum * 10;\r\n    this._uboMapBuffer[3] = 0.003;\r\n    this._uboMapBuffer[4] = 0.001;\r\n    this._uboMapBuffer[5] = 2.0 * 0.01 * 100;\r\n    this._uboMapBuffer[6] = 0;\r\n\r\n    if (this.count === frequency && this.flag) {\r\n      this.flag = false;\r\n      this.imagePre = this.imageNext;\r\n      this.imageNext = (this.imageNext + 1) % this.option.flowFields.length;\r\n      const that = this;\r\n      const promiseArr = [];\r\n      this._imageMap.set(FlowEnum.FLOW_FIELD_IMAGE + \"0\", this._imageMap.get(FlowEnum.FLOW_FIELD_IMAGE + \"1\"));\r\n      this._imageMap.set(FlowEnum.SEEDING_IMAGE + \"0\", this._imageMap.get(FlowEnum.SEEDING_IMAGE + \"1\"));\r\n      promiseArr.push(this.getImage(FlowEnum.FLOW_FIELD_IMAGE + \"1\", this.option.flowFields[this.imageNext], \"flipY\"));\r\n      promiseArr.push(this.getImage(FlowEnum.SEEDING_IMAGE + \"1\", this.option.seeding[this.imageNext], \"flipY\"));\r\n      Promise.all(promiseArr).then((res) => {\r\n        that.flag = true;\r\n        that.count = 0;\r\n        that._textureMap.set(FlowEnum.FLOW_FIELD_TEXTURE + \"0\", that._textureMap.get(FlowEnum.FLOW_FIELD_TEXTURE + \"1\"));\r\n        that._textureMap.set(FlowEnum.SEEDING_TEXTURE + \"0\", that._textureMap.get(FlowEnum.SEEDING_TEXTURE + \"1\"));\r\n        const flowFieldTexture = createMyTexture(gl, 1, gl.TEXTURE_2D, WebGL2RenderingContext.RG32F, 0, 0);\r\n        fillTexture(\r\n          gl,\r\n          that._imageMap.get(FlowEnum.FLOW_FIELD_IMAGE + \"1\"),\r\n          \"Float_Point\",\r\n          0,\r\n          that.option.textureSize.flowField[0],\r\n          that.option.textureSize.flowField[1],\r\n          gl.TEXTURE_2D,\r\n          flowFieldTexture,\r\n          WebGL2RenderingContext.RG32F,\r\n          1,\r\n          WebGL2RenderingContext.RG,\r\n          WebGL2RenderingContext.FLOAT\r\n        );\r\n        that._textureMap.set(FlowEnum.FLOW_FIELD_TEXTURE + \"1\", flowFieldTexture);\r\n\r\n        const seedingTexture = createMyTexture(gl, 1, gl.TEXTURE_2D, WebGL2RenderingContext.RGBA8, 0, 0);\r\n        fillTexture(\r\n          gl,\r\n          that._imageMap.get(FlowEnum.SEEDING_IMAGE + \"1\"),\r\n          \"Integer\",\r\n          0,\r\n          that.option.textureSize.seeding[0],\r\n          that.option.textureSize.seeding[1],\r\n          gl.TEXTURE_2D,\r\n          seedingTexture,\r\n          WebGL2RenderingContext.RGBA8,\r\n          1,\r\n          WebGL2RenderingContext.RGBA,\r\n          WebGL2RenderingContext.UNSIGNED_BYTE\r\n        );\r\n        that._textureMap.set(FlowEnum.SEEDING_TEXTURE + \"1\", seedingTexture);\r\n      });\r\n    }\r\n  }\r\n\r\n  swap() {\r\n    if (this._beginBlock % 2 == 0) {\r\n      this._sVAO = this._simulationVAO;\r\n      this._rVAO = this._renderVAO;\r\n      this._xfBO = this._XFBO;\r\n      this._unPackBuffer = this._simulationBuffer;\r\n    } else {\r\n      this._sVAO = this._simulationVAO2;\r\n      this._rVAO = this._renderVAO2;\r\n      this._xfBO = this._XFBO2;\r\n      this._unPackBuffer = this._xfSimulationBuffer;\r\n    }\r\n  }\r\n\r\n  bindUBO(gl, bindingPointIndex) {\r\n    gl.bindBuffer(gl.UNIFORM_BUFFER, this._UBO);\r\n    gl.bufferSubData(gl.UNIFORM_BUFFER, 0, this._uboMapBuffer);\r\n    gl.bindBufferRange(gl.UNIFORM_BUFFER, bindingPointIndex, this._UBO, 0, this._uboMapBuffer.length * 4.0);\r\n  }\r\n\r\n  tickRender(gl, matrix) {\r\n    const maxBlockSize = Math.ceil(Math.sqrt(this.option.constraints.maxTrajectoryNum));\r\n\r\n    this.bindUBO(gl, 0);\r\n    // Pass 1: Simulation\r\n    gl.bindVertexArray(this._sVAO);\r\n    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this._xfBO);\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, this._textureMap.get(FlowEnum.FLOW_FIELD_TEXTURE + 0));\r\n    gl.bindSampler(0, this._samplerMap.get(FlowEnum.L_SAMPLER));\r\n    gl.activeTexture(gl.TEXTURE1);\r\n    gl.bindTexture(gl.TEXTURE_2D, this._textureMap.get(FlowEnum.FLOW_FIELD_TEXTURE + 1));\r\n    gl.bindSampler(1, this._samplerMap.get(FlowEnum.L_SAMPLER));\r\n    gl.activeTexture(gl.TEXTURE2);\r\n    gl.bindTexture(gl.TEXTURE_2D, this._textureMap.get(FlowEnum.SEEDING_TEXTURE + 0));\r\n    gl.bindSampler(2, this._samplerMap.get(FlowEnum.N_SAMPLER));\r\n    gl.activeTexture(gl.TEXTURE3);\r\n    gl.bindTexture(gl.TEXTURE_2D, this._textureMap.get(FlowEnum.SEEDING_TEXTURE + 1));\r\n    gl.bindSampler(3, this._samplerMap.get(FlowEnum.N_SAMPLER));\r\n\r\n    this._updateProgram.useProgram(gl);\r\n    this._updateProgram.setVec1i(gl, \"flowField\", [0, 1]);\r\n    this._updateProgram.setVec1i(gl, \"mask\", [2, 3]);\r\n    this._updateProgram.setFloat(gl, \"randomSeed\", Math.random());\r\n    this._updateProgram.setUniformBlock(gl, \"FlowFieldUniforms\", 0);\r\n    gl.enable(gl.RASTERIZER_DISCARD);\r\n    gl.beginTransformFeedback(gl.POINTS);\r\n\r\n    const lineNumber = this.option.lineNumber ? this.option.lineNumber : 10000;\r\n    gl.drawArrays(gl.POINTS, 0, lineNumber);\r\n    gl.endTransformFeedback();\r\n    gl.disable(gl.RASTERIZER_DISCARD);\r\n    gl.bindVertexArray(null);\r\n    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\r\n\r\n    // Pass 2: Update particle pool\r\n\r\n    gl.bindBuffer(gl.PIXEL_UNPACK_BUFFER, this._unPackBuffer);\r\n    updateTextureByBuffer(\r\n      gl,\r\n      0,\r\n      maxBlockSize,\r\n      maxBlockSize,\r\n      gl.TEXTURE_2D,\r\n      this._textureMap.get(FlowEnum.POOL_TEXTURE),\r\n      this._textureOffsetArray[this._beginBlock].offsetX,\r\n      this._textureOffsetArray[this._beginBlock].offsetY,\r\n      WebGL2RenderingContext.RGB,\r\n      WebGL2RenderingContext.FLOAT\r\n    );\r\n    gl.bindBuffer(gl.PIXEL_UNPACK_BUFFER, null);\r\n    if (this._segmentPrepare > 0) {\r\n      this._segmentPrepare--;\r\n      return;\r\n    }\r\n    if (this.flag) this.count++;\r\n    // gl.finish();\r\n\r\n    // Pass 3: Rendering by trajectorires or points\r\n    gl.bindVertexArray(this._rVAO);\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, this._textureMap.get(FlowEnum.POOL_TEXTURE));\r\n    gl.bindSampler(0, this._samplerMap.get(FlowEnum.N_SAMPLER));\r\n    gl.activeTexture(gl.TEXTURE1);\r\n    gl.bindTexture(gl.TEXTURE_2D, this._textureMap.get(FlowEnum.PROJECTION_MAPBOX_TEXTURE));\r\n    gl.bindSampler(1, this._samplerMap.get(FlowEnum.L_SAMPLER));\r\n    gl.disable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND);\r\n    gl.blendColor(0.0, 0.0, 0.0, 0.0);\r\n    gl.blendEquation(gl.FUNC_ADD);\r\n    gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n    this._trajectoryProgram.useProgram(gl);\r\n    this._trajectoryProgram.setInt(gl, \"particlePool\", 0);\r\n    this._trajectoryProgram.setInt(gl, \"projectionTexture\", 1);\r\n    this._trajectoryProgram.setInt(gl, \"blockNum\", this.option.constraints.maxSegmentNum);\r\n    this._trajectoryProgram.setInt(gl, \"beginBlock\", this._beginBlock);\r\n    this._trajectoryProgram.setInt(gl, \"blockSize\", maxBlockSize);\r\n    this._trajectoryProgram.setFloat(gl, \"currentSegmentNum\", 8.0);\r\n    this._trajectoryProgram.setFloat(gl, \"fillWidth\", 1);\r\n    this._trajectoryProgram.setFloat(gl, \"aaWidth\", 2);\r\n    this._trajectoryProgram.setFloat2(gl, \"viewport\", gl.canvas.width, gl.canvas.height);\r\n    this._trajectoryProgram.setMat4(gl, \"u_matrix\", matrix);\r\n    this._trajectoryProgram.setUniformBlock(gl, \"FlowFieldUniforms\", 0);\r\n    gl.drawArraysInstanced(gl.TRIANGLE_STRIP, 0, (16 - 1) * 2, lineNumber);\r\n\r\n    gl.disable(gl.BLEND);\r\n\r\n    gl.bindVertexArray(null);\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n  }\r\n\r\n  async generateCustomLayer(id) {\r\n    const that = this;\r\n    let mapObj;\r\n    await this.prepareAsyncImage();\r\n    const result = {\r\n      id: id,\r\n      type: \"custom\",\r\n      onAdd(map, gl) {\r\n        const available_extensions = gl.getSupportedExtensions();\r\n        for (const extension of available_extensions) {\r\n          gl.getExtension(extension);\r\n        }\r\n        mapObj = map;\r\n        that.prepareResource.call(that, gl);\r\n      },\r\n      render(gl, matrix) {\r\n        that.tickLogicCount(gl);\r\n        that.tickRender(gl, matrix);\r\n        mapObj.triggerRepaint();\r\n      },\r\n    };\r\n    return result;\r\n  }\r\n\r\n  changeState(index) {\r\n    if (!this._gl || index >= this.option.flowFields.length) return;\r\n    const gl = this._gl;\r\n    this.flag = false;\r\n    this.imagePre = index;\r\n    this.imageNext = (index + 1) % this.option.flowFields.length;\r\n    const promiseArr = [];\r\n    promiseArr.push(this.getImage(FlowEnum.FLOW_FIELD_IMAGE + \"0\", this.option.flowFields[this.imagePre], \"flipY\"));\r\n    promiseArr.push(this.getImage(FlowEnum.SEEDING_IMAGE + \"0\", this.option.seeding[this.imagePre], \"flipY\"));\r\n    promiseArr.push(this.getImage(FlowEnum.FLOW_FIELD_IMAGE + \"1\", this.option.flowFields[this.imageNext], \"flipY\"));\r\n    promiseArr.push(this.getImage(FlowEnum.SEEDING_IMAGE + \"1\", this.option.seeding[this.imageNext], \"flipY\"));\r\n    Promise.all(promiseArr).then((res) => {\r\n      this.flag = true;\r\n      this.count = 0;\r\n      const flowFieldTexture0 = createMyTexture(gl, 1, gl.TEXTURE_2D, WebGL2RenderingContext.RG32F, 0, 0);\r\n      fillTexture(\r\n        gl,\r\n        this._imageMap.get(FlowEnum.FLOW_FIELD_IMAGE + \"0\"),\r\n        \"Float_Point\",\r\n        0,\r\n        this.option.textureSize.flowField[0],\r\n        this.option.textureSize.flowField[1],\r\n        gl.TEXTURE_2D,\r\n        flowFieldTexture0,\r\n        WebGL2RenderingContext.RG32F,\r\n        1,\r\n        WebGL2RenderingContext.RG,\r\n        WebGL2RenderingContext.FLOAT\r\n      );\r\n      this._textureMap.set(FlowEnum.FLOW_FIELD_TEXTURE + \"0\", flowFieldTexture0);\r\n      const flowFieldTexture1 = createMyTexture(gl, 1, gl.TEXTURE_2D, WebGL2RenderingContext.RG32F, 0, 0);\r\n      fillTexture(\r\n        gl,\r\n        this._imageMap.get(FlowEnum.FLOW_FIELD_IMAGE + \"1\"),\r\n        \"Float_Point\",\r\n        0,\r\n        this.option.textureSize.flowField[0],\r\n        this.option.textureSize.flowField[1],\r\n        gl.TEXTURE_2D,\r\n        flowFieldTexture1,\r\n        WebGL2RenderingContext.RG32F,\r\n        1,\r\n        WebGL2RenderingContext.RG,\r\n        WebGL2RenderingContext.FLOAT\r\n      );\r\n      this._textureMap.set(FlowEnum.FLOW_FIELD_TEXTURE + \"0\", flowFieldTexture1);\r\n\r\n      const seedingTexture0 = createMyTexture(gl, 1, gl.TEXTURE_2D, WebGL2RenderingContext.RGBA8, 0, 0);\r\n      fillTexture(\r\n        gl,\r\n        this._imageMap.get(FlowEnum.SEEDING_IMAGE + \"0\"),\r\n        \"Integer\",\r\n        0,\r\n        this.option.textureSize.seeding[0],\r\n        this.option.textureSize.seeding[1],\r\n        gl.TEXTURE_2D,\r\n        seedingTexture0,\r\n        WebGL2RenderingContext.RGBA8,\r\n        1,\r\n        WebGL2RenderingContext.RGBA,\r\n        WebGL2RenderingContext.UNSIGNED_BYTE\r\n      );\r\n      this._textureMap.set(FlowEnum.SEEDING_TEXTURE + \"0\", seedingTexture0);\r\n      const seedingTexture1 = createMyTexture(gl, 1, gl.TEXTURE_2D, WebGL2RenderingContext.RGBA8, 0, 0);\r\n      fillTexture(\r\n        gl,\r\n        this._imageMap.get(FlowEnum.SEEDING_IMAGE + \"1\"),\r\n        \"Integer\",\r\n        0,\r\n        this.option.textureSize.seeding[0],\r\n        this.option.textureSize.seeding[1],\r\n        gl.TEXTURE_2D,\r\n        seedingTexture1,\r\n        WebGL2RenderingContext.RGBA8,\r\n        1,\r\n        WebGL2RenderingContext.RGBA,\r\n        WebGL2RenderingContext.UNSIGNED_BYTE\r\n      );\r\n      this._textureMap.set(FlowEnum.SEEDING_TEXTURE + \"1\", seedingTexture1);\r\n    });\r\n  }\r\n}\r\n\r\nconst addSampler = (gl, magFilter, minFilter, addressModeU, addressModeV, addressModeW) => {\r\n  const sampler = gl.createSampler();\r\n  gl.samplerParameteri(sampler, gl.TEXTURE_MAG_FILTER, magFilter);\r\n  gl.samplerParameteri(sampler, gl.TEXTURE_MIN_FILTER, minFilter);\r\n  gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_S, addressModeU);\r\n  gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_T, addressModeV);\r\n  if (addressModeW) {\r\n    gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_R, addressModeW);\r\n  }\r\n  return sampler;\r\n};\r\n\r\nconst createMyTexture = (gl, mipLevels, target, internalFormat, width, height) => {\r\n  const texture = gl.createTexture();\r\n  if (width !== 0 && height !== 0) {\r\n    gl.bindTexture(target, texture);\r\n    gl.texStorage2D(target, mipLevels, internalFormat, width, height);\r\n    gl.bindTexture(target, null);\r\n  }\r\n  return texture;\r\n};\r\n\r\nconst makeBufferBySource = (gl, target, source, usage) => {\r\n  const VBO = gl.createBuffer();\r\n  gl.bindBuffer(target, VBO);\r\n  gl.bufferData(target, source, usage);\r\n  return VBO;\r\n};\r\n\r\nconst fillTexture = (gl, image, dataType, level, width, height, target, texture, internalFormat, mipLevels, format, type) => {\r\n  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);\r\n  gl.bindTexture(target, texture);\r\n  gl.texStorage2D(target, mipLevels, internalFormat, width, height);\r\n  gl.bindTexture(target, null);\r\n  if (dataType === \"Float_Point\") {\r\n    const pixelData = new Uint8Array(image.width * image.height * 4);\r\n    const frameTexture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, frameTexture);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, image.width, image.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n\r\n    const FBO = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, FBO);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, frameTexture, 0);\r\n\r\n    gl.readPixels(0, 0, image.width, image.height, gl.RGBA, gl.UNSIGNED_BYTE, pixelData);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n    gl.bindTexture(target, texture);\r\n    gl.texSubImage2D(target, level, 0, 0, width, height, format, type, new Float32Array(pixelData.buffer));\r\n    if (mipLevels > 1) {\r\n      gl.generateMipmap(target);\r\n    }\r\n    gl.bindTexture(target, null);\r\n  } else if (dataType === \"Integer\") {\r\n    gl.bindTexture(target, texture);\r\n    gl.texSubImage2D(target, level, 0, 0, width, height, format, type, image);\r\n    if (mipLevels > 1) {\r\n      gl.generateMipmap(target);\r\n    }\r\n    gl.bindTexture(target, null);\r\n  }\r\n};\r\n\r\nconst updateTextureByBuffer = (gl, level, width, height, target, texture, xoffset, yoffset, format, type) => {\r\n  gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);\r\n  gl.bindTexture(target, texture);\r\n  gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, 0);\r\n  gl.bindTexture(target, null);\r\n};\r\n\r\nconst FlowEnum = {\r\n  UPDATE_VERTEX: \"update_vertex\",\r\n  UPDATE_FRAGMENT: \"update_fragment\",\r\n  TRAJECTORY_VERTEX: \"trajectory_vertex\",\r\n  TRAJECTORY_FRAGMENT: \"trajectory_fragment\",\r\n  POINT_VERTEX: \"point_vertex\",\r\n  POINT_FRAGMENT: \"point_fragment\",\r\n  POOL_VERTEX: \"pool_vertex\",\r\n  POOL_FRAGMENT: \"pool_fragment\",\r\n  L_SAMPLER: \"l_sampler\",\r\n  N_SAMPLER: \"n_sampler\",\r\n  FLOW_FIELD_IMAGE: \"flow_field_image\",\r\n  SEEDING_IMAGE: \"seeding_image\",\r\n  PROJECTION_MAPBOX_IMAGE: \"projection_mapbox_image\",\r\n  PROJECTION_CESIUM_IMAGE: \"projection_cesium_image\",\r\n  PROJECTION_OL_IMAGE: \"projection_ol_image\",\r\n  FLOW_FIELD_TEXTURE: \"flow_field_texture\",\r\n  SEEDING_TEXTURE: \"seeding_texture\",\r\n  PROJECTION_MAPBOX_TEXTURE: \"projection_mapbox_texture\",\r\n  PROJECTION_CESIUM_TEXTURE: \"projection_cesium_texture\",\r\n  PROJECTION_OL_TEXTURE: \"projection_ol_texture\",\r\n  POOL_TEXTURE: \"pool_texture\",\r\n};\r\n\r\nclass GlProgram {\r\n  constructor(gl) {\r\n    this.program = gl.createProgram();\r\n  }\r\n\r\n  setShader(gl, vertexScript, fragmentScript, outVaryings) {\r\n    if (this.program) {\r\n      const vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n      const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n      gl.shaderSource(vertexShader, vertexScript);\r\n      gl.shaderSource(fragmentShader, fragmentScript);\r\n      gl.compileShader(vertexShader);\r\n      gl.compileShader(fragmentShader);\r\n      if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\r\n        //如果失败，则提示：\r\n        console.error(\"shader compiler error:\\n\" + gl.getShaderInfoLog(vertexShader));\r\n      }\r\n\r\n      gl.attachShader(this.program, vertexShader);\r\n      gl.attachShader(this.program, fragmentShader);\r\n      if (outVaryings) {\r\n        gl.transformFeedbackVaryings(this.program, outVaryings, gl.SEPARATE_ATTRIBS);\r\n      }\r\n      gl.linkProgram(this.program);\r\n    }\r\n  }\r\n\r\n  useProgram(gl) {\r\n    gl.useProgram(this.program);\r\n  }\r\n\r\n  setFloat(gl, name, value) {\r\n    const location = gl.getUniformLocation(this.program, name);\r\n    gl.uniform1f(location, value);\r\n  }\r\n\r\n  setInt(gl, name, value) {\r\n    const location = gl.getUniformLocation(this.program, name);\r\n    gl.uniform1i(location, value);\r\n  }\r\n\r\n  setVec1i(gl, name, vector) {\r\n    const location = gl.getUniformLocation(this.program, name);\r\n    gl.uniform1iv(location, vector);\r\n  }\r\n\r\n  setFloat2(gl, name, value1, value2) {\r\n    const uniformLocation = gl.getUniformLocation(this.program, name);\r\n    gl.uniform2f(uniformLocation, value1, value2);\r\n  }\r\n\r\n  setFloat3(gl, name, value1, value2, value3) {\r\n    const uniformLocation = gl.getUniformLocation(this.program, name);\r\n    gl.uniform3f(uniformLocation, value1, value2, value3);\r\n  }\r\n\r\n  setFloat4(gl, name, value1, value2, value3, value4) {\r\n    const uniformLocation = gl.getUniformLocation(this.program, name);\r\n    gl.uniform4f(uniformLocation, value1, value2, value3, value4);\r\n  }\r\n\r\n  setVec4(gl, name, vector) {\r\n    const uniformLocation = gl.getUniformLocation(this.program, name);\r\n    gl.uniform4fv(uniformLocation, vector);\r\n  }\r\n\r\n  setMat4(gl, name, matrix) {\r\n    const uniformLocation = gl.getUniformLocation(this.program, name);\r\n    gl.uniformMatrix4fv(uniformLocation, false, matrix);\r\n  }\r\n\r\n  setUniformBlock(gl, name, blockIndex) {\r\n    const uniformLocation = gl.getUniformBlockIndex(this.program, name);\r\n    gl.uniformBlockBinding(this.program, uniformLocation, blockIndex);\r\n  }\r\n}\r\n\r\nexport const rand = (min, max) => {\r\n  if (!max) {\r\n    max = min;\r\n    min = 0;\r\n  }\r\n  return Math.random() * (max - min) + min;\r\n};\r\n","\r\nimport { defineComponent, ref, onMounted } from \"vue\";\r\nimport { FlowMapbox } from \"mapbox-flow\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport mapBoxGl, { MapboxOptions } from \"mapbox-gl\";\r\nexport default defineComponent({\r\n  setup() {\r\n    const container = ref<HTMLDivElement>();\r\n    let map: mapBoxGl.Map;\r\n    const flowMapbox = new FlowMapbox({\r\n      seeding: [\r\n        \"/flow/texture/mask_100.png\",\r\n        \"/flow/texture/mask_101.png\",\r\n        \"/flow/texture/mask_102.png\",\r\n        \"/flow/texture/mask_103.png\",\r\n        \"/flow/texture/mask_104.png\",\r\n        \"/flow/texture/mask_105.png\",\r\n        \"/flow/texture/mask_106.png\",\r\n        \"/flow/texture/mask_107.png\",\r\n        \"/flow/texture/mask_108.png\",\r\n        \"/flow/texture/mask_109.png\",\r\n        \"/flow/texture/mask_110.png\",\r\n        \"/flow/texture/mask_111.png\",\r\n        \"/flow/texture/mask_112.png\",\r\n        \"/flow/texture/mask_113.png\",\r\n        \"/flow/texture/mask_114.png\",\r\n        \"/flow/texture/mask_115.png\",\r\n        \"/flow/texture/mask_116.png\",\r\n        \"/flow/texture/mask_117.png\",\r\n        \"/flow/texture/mask_118.png\",\r\n        \"/flow/texture/mask_119.png\",\r\n        \"/flow/texture/mask_120.png\",\r\n        \"/flow/texture/mask_121.png\",\r\n        \"/flow/texture/mask_122.png\",\r\n        \"/flow/texture/mask_123.png\",\r\n        \"/flow/texture/mask_124.png\",\r\n        \"/flow/texture/mask_125.png\",\r\n        \"/flow/texture/mask_126.png\",\r\n      ],\r\n      constraints: {\r\n        maxDropRate: 0.1,\r\n        maxDropRateBump: 0.2,\r\n        maxSegmentNum: 16,\r\n        maxTrajectoryNum: 262144,\r\n        maxTextureSize: 4096,\r\n      },\r\n      extent: [0.8334519409367115, 0.4087464036632672, 0.8388303296774701, 0.40586521884815613],\r\n      flowBoundary: {\r\n        uMax: 2.3461,\r\n        uMin: -2.1176,\r\n        vMax: 2.0175,\r\n        vMin: -1.8959,\r\n      },\r\n      flowFields: [\r\n        \"/flow/texture/uv_100.png\",\r\n        \"/flow/texture/uv_101.png\",\r\n        \"/flow/texture/uv_102.png\",\r\n        \"/flow/texture/uv_103.png\",\r\n        \"/flow/texture/uv_104.png\",\r\n        \"/flow/texture/uv_105.png\",\r\n        \"/flow/texture/uv_106.png\",\r\n        \"/flow/texture/uv_107.png\",\r\n        \"/flow/texture/uv_108.png\",\r\n        \"/flow/texture/uv_109.png\",\r\n        \"/flow/texture/uv_110.png\",\r\n        \"/flow/texture/uv_111.png\",\r\n        \"/flow/texture/uv_112.png\",\r\n        \"/flow/texture/uv_113.png\",\r\n        \"/flow/texture/uv_114.png\",\r\n        \"/flow/texture/uv_115.png\",\r\n        \"/flow/texture/uv_116.png\",\r\n        \"/flow/texture/uv_117.png\",\r\n        \"/flow/texture/uv_118.png\",\r\n        \"/flow/texture/uv_119.png\",\r\n        \"/flow/texture/uv_120.png\",\r\n        \"/flow/texture/uv_121.png\",\r\n        \"/flow/texture/uv_122.png\",\r\n        \"/flow/texture/uv_123.png\",\r\n        \"/flow/texture/uv_124.png\",\r\n        \"/flow/texture/uv_125.png\",\r\n        \"/flow/texture/uv_126.png\",\r\n      ],\r\n      projection: {\r\n        projectionMapbox: \"/flow/texture/projection_mapbox.png\",\r\n        projectionCesium: \"/flow/texture/projection_cesium.png\",\r\n        projectionOl: \"/flow/texture/projection_ol.png\",\r\n      },\r\n      textureSize: {\r\n        seeding: [1024, 558],\r\n        flowField: [1024, 558],\r\n        projection: [1024, 2048],\r\n      },\r\n    });\r\n    const clickHandle = () => {\r\n      flowMapbox.changeState(22);\r\n    };\r\n    const initMap = (layer: { id: string; type: \"custom\"; onAdd(map: any, gl: any): void; render(gl: any, matrix: any): void }) => {\r\n      const mapOpt: MapboxOptions & { useWebGL2: boolean } = {\r\n        container: container.value!,\r\n        style: \"mapbox://styles/johnnyt/clblx2t3v000a14proaq4e9qv\",\r\n        center: [121.024075, 31.765318],\r\n        zoom: 8.8,\r\n        useWebGL2: true,\r\n        antialias: true,\r\n        accessToken: \"pk.eyJ1Ijoiam9obm55dCIsImEiOiJja2xxNXplNjYwNnhzMm5uYTJtdHVlbTByIn0.f1GfZbFLWjiEayI6hb_Qvg\",\r\n      };\r\n      map = new mapBoxGl.Map(mapOpt);\r\n      map.on(\"load\", () => {\r\n        map.addLayer(layer);\r\n      });\r\n    };\r\n\r\n    onMounted(async () => {\r\n      const layer = await flowMapbox.generateCustomLayer(\"flow\");\r\n      initMap(layer);\r\n    });\r\n\r\n    return { container, clickHandle };\r\n  },\r\n});\r\n","import { render } from \"./FlowView.vue?vue&type=template&id=183da8e0&ts=true\"\nimport script from \"./FlowView.vue?vue&type=script&lang=ts\"\nexport * from \"./FlowView.vue?vue&type=script&lang=ts\"\n\nimport \"./FlowView.vue?vue&type=style&index=0&id=183da8e0&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}"],"names":["_hoisted_1","class","ref","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createElementBlock","FlowMapbox","constructor","option","_defineProperty","Map","Float32Array","this","_segmentPrepare","constraints","maxSegmentNum","_shaderScriptMap","set","FlowEnum","UPDATE_VERTEX","UPDATE_FRAGMENT","TRAJECTORY_VERTEX","TRAJECTORY_FRAGMENT","prepareAsyncImage","promiseArr","i","push","getImage","FLOW_FIELD_IMAGE","flowFields","SEEDING_IMAGE","seeding","PROJECTION_MAPBOX_IMAGE","projection","projectionMapbox","Promise","all","key","address","flip","resolve","reject","axios","get","responseType","then","res","createImageBitmap","data","imageOrientation","premultiplyAlpha","colorSpaceConversion","imageBitmap","_imageMap","prepareResource","gl","_gl","_updateProgram","GlProgram","_trajectoryProgram","setShader","maxBlockSize","Math","ceil","sqrt","maxTrajectoryNum","_uboMapBuffer","flowBoundary","uMin","vMin","uMax","vMax","_samplerMap","L_SAMPLER","addSampler","LINEAR","CLAMP_TO_EDGE","N_SAMPLER","NEAREST","_simulationVAO","createVertexArray","bindVertexArray","particleMapBuffer","fill","rand","_simulationBuffer","makeBufferBySource","ARRAY_BUFFER","DYNAMIC_DRAW","bindBuffer","vertexAttribPointer","FLOAT","enableVertexAttribArray","particleCountdownArray","lifeBuffer","_simulationVAO2","_xfSimulationBuffer","xfLifeBuffer","_renderVAO","vertexAttribDivisor","_renderVAO2","_XFBO","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","TRANSFORM_FEEDBACK_BUFFER","bindBufferRange","_XFBO2","_UBO","createBuffer","bufferData","flowFieldTexture","createMyTexture","TEXTURE_2D","WebGL2RenderingContext","RG32F","fillTexture","textureSize","flowField","RG","_textureMap","FLOW_FIELD_TEXTURE","seedingTexture","RGBA8","RGBA","UNSIGNED_BYTE","SEEDING_TEXTURE","projectionTexture","PROJECTION_MAPBOX_TEXTURE","maxBlockColumn","floor","maxTextureSize","offset","offsetX","offsetY","_textureOffsetArray","poolTexture","RGB32F","POOL_TEXTURE","tickLogicCount","_beginBlock","swap","frequency","count","flag","imagePre","imageNext","length","that","_sVAO","_rVAO","_xfBO","_unPackBuffer","bindUBO","bindingPointIndex","UNIFORM_BUFFER","bufferSubData","tickRender","matrix","activeTexture","TEXTURE0","bindTexture","bindSampler","TEXTURE1","TEXTURE2","TEXTURE3","useProgram","setVec1i","setFloat","random","setUniformBlock","enable","RASTERIZER_DISCARD","beginTransformFeedback","POINTS","lineNumber","drawArrays","endTransformFeedback","disable","PIXEL_UNPACK_BUFFER","updateTextureByBuffer","RGB","DEPTH_TEST","BLEND","blendColor","blendEquation","FUNC_ADD","blendFuncSeparate","ONE","ONE_MINUS_SRC_ALPHA","setInt","setFloat2","canvas","width","height","setMat4","drawArraysInstanced","TRIANGLE_STRIP","generateCustomLayer","id","mapObj","result","type","onAdd","map","available_extensions","getSupportedExtensions","extension","getExtension","call","triggerRepaint","changeState","index","flowFieldTexture0","flowFieldTexture1","seedingTexture0","seedingTexture1","magFilter","minFilter","addressModeU","addressModeV","addressModeW","sampler","createSampler","samplerParameteri","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","mipLevels","target","internalFormat","texture","createTexture","texStorage2D","source","usage","VBO","image","dataType","level","format","pixelStorei","UNPACK_FLIP_Y_WEBGL","pixelData","Uint8Array","frameTexture","texImage2D","texParameteri","FBO","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","readPixels","texSubImage2D","buffer","generateMipmap","xoffset","yoffset","UNPACK_PREMULTIPLY_ALPHA_WEBGL","POINT_VERTEX","POINT_FRAGMENT","POOL_VERTEX","POOL_FRAGMENT","PROJECTION_CESIUM_IMAGE","PROJECTION_OL_IMAGE","PROJECTION_CESIUM_TEXTURE","PROJECTION_OL_TEXTURE","program","createProgram","vertexScript","fragmentScript","outVaryings","vertexShader","createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","name","value","location","getUniformLocation","uniform1f","uniform1i","vector","uniform1iv","value1","value2","uniformLocation","uniform2f","setFloat3","value3","uniform3f","setFloat4","value4","uniform4f","setVec4","uniform4fv","uniformMatrix4fv","blockIndex","getUniformBlockIndex","uniformBlockBinding","min","max","defineComponent","setup","container","flowMapbox","maxDropRate","maxDropRateBump","extent","projectionCesium","projectionOl","clickHandle","initMap","layer","mapOpt","style","center","zoom","useWebGL2","antialias","accessToken","mapBoxGl","on","addLayer","onMounted","async","__exports__","_typeof","obj","Symbol","iterator","prototype","_toPrimitive","input","hint","prim","toPrimitive","undefined","TypeError","String","Number","_toPropertyKey","arg","toPropertyKey","Object","defineProperty","enumerable","configurable","writable"],"sourceRoot":""}